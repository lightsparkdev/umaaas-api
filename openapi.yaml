openapi: 3.1.0
info:
  title: UMA as a Service (UMAaas) API
  description: |
    API for managing global payments to and from UMA addresses. 
    This service facilitates cross-currency financial transactions using simple human-readable UMA addresses.
  version: 1.0.0
  contact:
    name: Lightspark Support
    email: support@lightspark.com
  license:
    name: Proprietary
    url: https://lightspark.com/terms

servers:
  - url: https://api.lightspark.com/umaas/v1
    description: Production server

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: API token authentication using format <api token id>:<api client secret>
    
    WebhookSignature:
      type: apiKey
      in: header
      name: X-UMAaas-Signature
      description: |
        HMAC-SHA256 signature of the webhook payload, which can be used to verify that the webhook was sent by UMAaas.
        
        The signature is created by:
        1. Taking the entire webhook request body as a string
        2. Creating an HMAC-SHA256 hash of the request body using the webhook secret as the key
        3. Encoding the hash in hexadecimal format
        
        Platforms should validate this signature by performing the same calculation and comparing the result with this header value.

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

    Address:
      type: object
      properties:
        line1:
          type: string
          description: Street address line 1
          example: "123 Main Street"
        line2:
          type: string
          description: Street address line 2
          example: "Apt 4B"
        city:
          type: string
          description: City
          example: "San Francisco"
        state:
          type: string
          description: State/Province/Region
          example: "CA"
        postalCode:
          type: string
          description: Postal/ZIP code
          example: "94105"
        country:
          type: string
          description: Country code (ISO 3166-1 alpha-2)
          example: "US"

    BankAccountInfo:
      type: object
      properties:
        accountType:
          type: string
          enum: [CLABE, US_ACCOUNT, PIX, IBAN, OTHER]
          description: Type of bank account information
          example: "US_ACCOUNT"
        data:
          type: object
          description: Flexible structure based on accountType
          additionalProperties: true
          example:
            accountNumber: "123456789"
            routingNumber: "987654321"

    User:
      type: object
      required:
        - umaAddress
        - platformUserId
        - userType
      properties:
        id:
          type: string
          description: System-generated unique identifier
          readOnly: true
          example: "usr_12345678"
        umaAddress:
          type: string
          description: full UMA address
          example: "$john.doe@uma.domain.com"
        platformUserId:
          type: string
          description: Platform-specific user identifier
          example: "platform_user_123"
        userType:
          type: string
          enum: [INDIVIDUAL, BUSINESS]
          description: Whether the user is an individual or a business entity
          example: "INDIVIDUAL"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          readOnly: true
          example: "2023-07-21T17:32:28Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true
          example: "2023-07-21T17:32:28Z"
      discriminator:
        propertyName: userType
        mapping:
          INDIVIDUAL: '#/components/schemas/IndividualUser'
          BUSINESS: '#/components/schemas/BusinessUser'

    IndividualUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - fullName
            - dateOfBirth
            - address
            - bankAccountInfo
          properties:
            fullName:
              type: string
              description: Individual's full name
              example: "John Michael Doe"
            dateOfBirth:
              type: string
              format: date
              description: Date of birth in ISO 8601 format (YYYY-MM-DD)
              example: "1990-01-15"
            address:
              $ref: '#/components/schemas/Address'
            bankAccountInfo:
              $ref: '#/components/schemas/BankAccountInfo'

    BusinessUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - businessInfo
            - address
            - bankAccountInfo
          properties:
            address:
              $ref: '#/components/schemas/Address'
            bankAccountInfo:
              $ref: '#/components/schemas/BankAccountInfo'
            businessInfo:
              type: object
              required:
                - legalName
              description: Additional information required for business entities
              properties:
                legalName:
                  type: string
                  description: Legal name of the business
                  example: "Acme Corporation, Inc."
                registrationNumber:
                  type: string
                  description: Business registration number
                  example: "BRN-123456789"
                taxId:
                  type: string
                  description: Tax identification number
                  example: "EIN-987654321"

    CounterpartyFieldDefinition:
      type: object
      properties:
        name:
          type: string
          enum: [FULL_NAME, ADDRESS, DATE_OF_BIRTH, TAX_ID, REGISTRATION_NUMBER, ACCOUNT_NUMBER]
          description: Name of the counterparty field
          example: "FULL_NAME"
        mandatory:
          type: boolean
          description: Whether the field is mandatory
          example: true

    PlatformConfig:
      type: object
      properties:
        id:
          type: string
          description: System-generated unique identifier
          readOnly: true
          example: "cfg_87654321"
        umaDomain:
          type: string
          description: UMA domain for this platform
          example: "platform.uma.domain"
        requiredCounterpartyFields:
          type: array
          items:
            $ref: '#/components/schemas/CounterpartyFieldDefinition'
          description: List of counterparty fields and their requirements
          example:
            - name: "FULL_NAME"
              mandatory: true
            - name: "DATE_OF_BIRTH"
              mandatory: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          readOnly: true
          example: "2023-06-15T12:30:45Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true
          example: "2023-06-15T12:30:45Z"

    TransactionStatus:
      type: string
      enum: [PENDING, COMPLETED, FAILED, REFUNDED]
      description: Status of a payment transaction

    TransactionType:
      type: string
      enum: [INCOMING, OUTGOING]
      description: Type of transaction (incoming payment or outgoing payment)

    Currency:
      type: object
      properties:
        code:
          type: string
          description: Three-letter currency code (ISO 4217) for fiat currencies. Some cryptocurrencies may use their own ticker symbols (e.g. "SAT" for satoshis, "USDC" for USDCoin, etc.)
          example: "USD"
        name:
          type: string
          description: Full name of the currency
          example: "United States Dollar"
        symbol:
          type: string
          description: Symbol of the currency
          example: "$"
        decimals:
          type: integer
          description: Number of decimal places for the currency
          example: 2 # e.g. 123.45

    CurrencyAmount:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: string
          description: String representation of the amount with decimal places (to avoid floating point precision issues)
          example: "125.50"
        currency:
          $ref: '#/components/schemas/Currency'
    
    Transaction:
      type: object
      required:
        - transactionId
        - status
        - type
        - senderUmaAddress
        - receiverUmaAddress
        - userId
        - platformUserId
      properties:
        transactionId:
          type: string
          description: Unique identifier for the transaction
          example: "txn_1a2b3c4d5e6f"
        status:
          $ref: '#/components/schemas/TransactionStatus'
        type:
          $ref: '#/components/schemas/TransactionType'
        senderUmaAddress:
          type: string
          description: UMA address of the payment sender
          example: "$sender@external.domain"
        receiverUmaAddress:
          type: string
          description: UMA address of the payment recipient
          example: "$recipient@uma.domain"
        userId:
          type: string
          description: System ID of the user (sender for outgoing, recipient for incoming)
          example: "usr_12345678"
        platformUserId:
          type: string
          description: Platform-specific ID of the user (sender for outgoing, recipient for incoming)
          example: "platform_user_123"
        settlementTime:
          type: string
          format: date-time
          description: When the payment was or will be settled
          example: "2023-08-15T14:30:00Z"
        createdAt:
          type: string
          format: date-time
          description: When the transaction was created
          example: "2023-08-15T14:25:18Z"
        description:
          type: string
          description: Optional memo or description for the payment
          example: "Payment for invoice #1234"
        counterpartyInformation:
          type: object
          description: Additional information about the counterparty, if available
          additionalProperties: true
          example:
            fullName: "John Sender"
            country: "DE"

    IncomingTransaction:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - receivedAmount
          properties:
            type:
              $ref: '#/components/schemas/TransactionType'
              example: "INCOMING"
              description: Always "INCOMING" for incoming transactions
            receivedAmount:
              $ref: '#/components/schemas/CurrencyAmount'
              description: Amount received in the recipient's currency

    OutgoingTransaction:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - sentAmount
          properties:
            type:
              $ref: '#/components/schemas/TransactionType'
              example: "OUTGOING"
              description: Always "OUTGOING" for outgoing transactions
            sentAmount:
              $ref: '#/components/schemas/CurrencyAmount'
              description: Amount sent in the sender's currency
            receivedAmount:
              $ref: '#/components/schemas/CurrencyAmount'
              description: Amount to be received by recipient (if known)
            exchangeRate:
              type: object
              description: If currency conversion occurred, contains exchange rate details
              properties:
                fromCurrency:
                  type: string
                  example: "EUR"
                toCurrency:
                  type: string
                  example: "USD" 
                rate:
                  type: string
                  example: "1.08"

paths:
  /users:
    post:
      summary: Add a new user
      description: Register a new user in the system with UMA address and bank account information
      operationId: createUser
      tags:
        - Users
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/IndividualUser'
                - $ref: '#/components/schemas/BusinessUser'
            examples:
              individualUser:
                summary: Create individual user example
                value:
                  umaAddress: "$jane.doe@uma.domain.com"
                  platformUserId: "platform_user_456"
                  userType: "INDIVIDUAL"
                  fullName: "Jane Doe"
                  dateOfBirth: "1992-03-25"
                  address:
                    line1: "123 Pine Street"
                    line2: "Unit 501"
                    city: "Seattle"
                    state: "WA"
                    postalCode: "98101"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    data:
                      accountNumber: "123498765"
                      routingNumber: "321456789"
                      accountHolderName: "Jane Doe"
              businessUser:
                summary: Create business user example
                value:
                  umaAddress: "$acme@uma.domain.com"
                  platformUserId: "platform_biz_789"
                  userType: "BUSINESS"
                  businessInfo:
                    legalName: "Acme Corporation"
                    registrationNumber: "BRN-456789123"
                    taxId: "EIN-987123456"
                  address:
                    line1: "400 Commerce Way"
                    city: "Austin"
                    state: "TX"
                    postalCode: "78701"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    data:
                      accountNumber: "987123456"
                      routingNumber: "789123456"
                      accountHolderName: "Acme Corporation"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - User with the UMA address or platform user ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: System-generated unique user identifier
        required: true
        schema:
          type: string
    get:
      summary: Get user by ID
      description: Retrieve a user by their system-generated ID
      operationId: getUserById
      tags:
        - Users
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user by ID
      description: Update a user's metadata by their system-generated ID
      operationId: updateUserById
      tags:
        - Users
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: individualUpdate
                  properties:
                    userType:
                      type: string
                      enum: [INDIVIDUAL]
                      description: Update user type to individual
                    fullName:
                      type: string
                      description: Individual's full name
                    dateOfBirth:
                      type: string
                      format: date
                      description: Date of birth in ISO 8601 format (YYYY-MM-DD)
                    address:
                      $ref: '#/components/schemas/Address'
                    bankAccountInfo:
                      $ref: '#/components/schemas/BankAccountInfo'
                - type: object
                  title: businessUpdate
                  properties:
                    userType:
                      type: string
                      enum: [BUSINESS]
                      description: Update user type to business
                    businessInfo:
                      type: object
                      properties:
                        legalName:
                          type: string
                          description: Legal name of the business
                        registrationNumber:
                          type: string
                          description: Business registration number
                        taxId:
                          type: string
                          description: Tax identification number
                    address:
                      $ref: '#/components/schemas/Address'
                    bankAccountInfo:
                      $ref: '#/components/schemas/BankAccountInfo'
            examples:
              individualUpdate:
                summary: Update individual user example
                value:
                  userType: "INDIVIDUAL"
                  fullName: "John Smith"
                  dateOfBirth: "1985-06-15"
                  address:
                    line1: "456 Market St"
                    city: "San Francisco"
                    state: "CA"
                    postalCode: "94103"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    data:
                      accountNumber: "987654321"
                      routingNumber: "123456789"
              businessUpdate:
                summary: Update business user example
                value:
                  userType: "BUSINESS"
                  businessInfo:
                    legalName: "New Tech Solutions LLC"
                    registrationNumber: "BRN-987654321"
                    taxId: "EIN-123456789"
                  address:
                    line1: "100 Technology Parkway"
                    city: "Palo Alto"
                    state: "CA"
                    postalCode: "94304"
                    country: "US"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/by-platform-id/{platformUserId}:
    parameters:
      - name: platformUserId
        in: path
        description: Platform-specific user identifier
        required: true
        schema:
          type: string
    get:
      summary: Get user by platform user ID
      description: Retrieve a user by their platform-specific ID
      operationId: getUserByPlatformId
      tags:
        - Users
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user by platform user ID
      description: Update a user's metadata by their platform-specific ID
      operationId: updateUserByPlatformId
      tags:
        - Users
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: individualUpdate
                  properties:
                    userType:
                      type: string
                      enum: [INDIVIDUAL]
                      description: Update user type to individual
                    fullName:
                      type: string
                      description: Individual's full name
                    dateOfBirth:
                      type: string
                      format: date
                      description: Date of birth in ISO 8601 format (YYYY-MM-DD)
                    address:
                      $ref: '#/components/schemas/Address'
                    bankAccountInfo:
                      $ref: '#/components/schemas/BankAccountInfo'
                - type: object
                  title: businessUpdate
                  properties:
                    userType:
                      type: string
                      enum: [BUSINESS]
                      description: Update user type to business
                    businessInfo:
                      type: object
                      properties:
                        legalName:
                          type: string
                          description: Legal name of the business
                        registrationNumber:
                          type: string
                          description: Business registration number
                        taxId:
                          type: string
                          description: Tax identification number
                    address:
                      $ref: '#/components/schemas/Address'
                    bankAccountInfo:
                      $ref: '#/components/schemas/BankAccountInfo'
            examples:
              individualUpdate:
                summary: Update individual user example
                value:
                  userType: "INDIVIDUAL"
                  fullName: "Jane Smith"
                  address:
                    line1: "789 Broadway"
                    city: "New York"
                    state: "NY"
                    postalCode: "10003"
                    country: "US"
              businessUpdate:
                summary: Update business user example
                value:
                  userType: "BUSINESS"
                  businessInfo:
                    legalName: "Global Enterprises Inc."
                    taxId: "EIN-987654321"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /config:
    get:
      summary: Get platform configuration
      description: Retrieve the current platform configuration
      operationId: getPlatformConfig
      tags:
        - Platform Configuration
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformConfig'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update platform configuration
      description: Update the platform configuration settings
      operationId: updatePlatformConfig
      tags:
        - Platform Configuration
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                umaDomain:
                  type: string
                  example: "mycompany.com"
                requiredCounterpartyFields:
                  type: array
                  items:
                    $ref: '#/components/schemas/CounterpartyFieldDefinition'
            example:
              umaDomain: "mycompany.com"
              requiredCounterpartyFields:
                - name: "FULL_NAME"
                  mandatory: true
                - name: "ADDRESS"
                  mandatory: true
                - name: "DATE_OF_BIRTH"
                  mandatory: true
                - name: "TAX_ID"
                  mandatory: false
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformConfig'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{transactionId}:
    parameters:
      - name: transactionId
        in: path
        description: Unique identifier of the transaction
        required: true
        schema:
          type: string
    get:
      summary: Get transaction by ID
      description: Retrieve detailed information about a specific transaction
      operationId: getTransactionById
      tags:
        - Transactions
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IncomingTransaction'
                  - $ref: '#/components/schemas/OutgoingTransaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions:
    get:
      summary: List transactions
      description: |
        Retrieve a paginated list of transactions with optional filtering.
        The transactions can be filtered by user ID, platform user ID, UMA address, 
        date range, status, and transaction type.
      operationId: listTransactions
      tags:
        - Transactions
      security:
        - BasicAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by system user ID
          required: false
          schema:
            type: string
        - name: platformUserId
          in: query
          description: Filter by platform-specific user ID
          required: false
          schema:
            type: string
        - name: umaAddress
          in: query
          description: Filter by UMA address (either sender or receiver)
          required: false
          schema:
            type: string
        - name: senderUmaAddress
          in: query
          description: Filter by sender UMA address
          required: false
          schema:
            type: string
        - name: receiverUmaAddress
          in: query
          description: Filter by receiver UMA address
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: type
          in: query
          description: Filter by transaction type
          required: false
          schema:
            $ref: '#/components/schemas/TransactionType'
        - name: startDate
          in: query
          description: Filter by start date (inclusive) in ISO 8601 format
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter by end date (inclusive) in ISO 8601 format
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results to return (default 20, max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination (returned from previous request)
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Field to sort results by
          required: false
          schema:
            type: string
            enum: [createdAt, settlementTime, receivedAmount, sentAmount]
            default: createdAt
        - name: sortOrder
          in: query
          description: Order to sort results in
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - hasMore
                properties:
                  data:
                    type: array
                    description: List of transactions matching the criteria
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/IncomingTransaction'
                        - $ref: '#/components/schemas/OutgoingTransaction'
                  hasMore:
                    type: boolean
                    description: Indicates if more results are available beyond this page
                  nextCursor:
                    type: string
                    description: Cursor to retrieve the next page of results (only present if hasMore is true)
                  totalCount:
                    type: integer
                    description: Total number of transactions matching the criteria (excluding pagination)
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

webhooks:
  incoming-payment:
    post:
      summary: Incoming payment webhook and approval mechanism
      description: |
        Webhook that is called when an incoming payment is received by a user's UMA address.
        This endpoint should be implemented by clients of the UMAaas API.
        
        ### Authentication
        The webhook includes a signature in the `X-UMAaas-Signature` header that allows you to verify that the webhook was sent by UMAaas.
        To verify the signature:
        1. Get the webhook secret provided to you during integration
        2. Create an HMAC-SHA256 hash of the entire request body (as a raw string) using the webhook secret as the key
        3. Encode the hash in hexadecimal format
        4. Compare this value to the signature in the `X-UMAaas-Signature` header
        
        If the values match, the webhook is authentic. If not, it should be rejected.
        
        ### Payment Approval Flow
        When a transaction has `status: "PENDING"`, this webhook serves as an approval mechanism:
        
        1. The client should check the `counterpartyInformation` against their requirements
        2. To APPROVE the payment, return a 200 OK response
        3. To REJECT the payment, return a 403 Forbidden response with an Error object
        4. To request more information, return a 422 Unprocessable Entity with specific missing fields
        
        The UMAaas system will proceed or cancel the payment based on your response.
        
        For transactions with other statuses (COMPLETED, FAILED, REFUNDED), this webhook is purely informational.
      operationId: incomingPaymentWebhook
      tags:
        - Webhooks
      security:
        - WebhookSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transaction
              properties:
                transaction:
                  $ref: '#/components/schemas/IncomingTransaction'
                timestamp:
                  type: string
                  format: date-time
                  description: ISO8601 timestamp when the webhook was sent (can be used to prevent replay attacks)
                  example: "2023-08-15T14:32:00Z"
                webhookId:
                  type: string
                  description: Unique identifier for this webhook delivery (can be used for idempotency)
                  example: "whk_1a2b3c4d5e6f"
            examples:
              pendingPayment:
                summary: Pending payment example requiring approval
                value:
                  transaction:
                    transactionId: "txn_9876543210"
                    status: "PENDING"
                    type: "INCOMING"
                    senderUmaAddress: "$sender@external.domain"
                    receiverUmaAddress: "$recipient@uma.domain"
                    receivedAmount:
                      amount: "500.00"
                      currency: 
                        code: "USD"
                        name: "United States Dollar"
                        symbol: "$"
                        decimals: 2
                    userId: "usr_12345678"
                    platformUserId: "platform_user_123"
                    counterpartyInformation:
                      fullName: "John Sender"
                      dateOfBirth: "1985-06-15"
                      country: "DE"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "whk_1a2b3c4d5e6f"
              completedPayment:
                summary: Completed payment notification
                value:
                  transaction:
                    transactionId: "txn_9876543210"
                    status: "COMPLETED"
                    type: "INCOMING"
                    senderUmaAddress: "$sender@external.domain"
                    receiverUmaAddress: "$recipient@uma.domain"
                    receivedAmount:
                      amount: "500.00"
                      currency: 
                        code: "USD"
                        name: "United States Dollar"
                        symbol: "$"
                        decimals: 2
                    userId: "usr_12345678"
                    platformUserId: "platform_user_123"
                    settlementTime: "2023-08-15T14:30:00Z"
                    createdAt: "2023-08-15T14:25:18Z"
                    description: "Payment for services"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "whk_1a2b3c4d5e6f"
      responses:
        '200':
          description: |
            Webhook received successfully. 
            For PENDING transactions, this indicates approval to proceed with the payment.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: |
            Forbidden - Payment rejected by the client.
            Only applicable for PENDING transactions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      code:
                        example: "payment_rejected"
                      message:
                        example: "Payment rejected due to compliance policy"
                      details:
                        example:
                          reason: "failed_counterparty_check"
                          rejectionReason: "User is in a restricted jurisdiction"
        '409':
          description: Conflict - Webhook has already been processed (duplicate webhookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: |
            Unprocessable Entity - Additional counterparty information required.
            Only applicable for PENDING transactions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      code:
                        example: "additional_info_required"
                      message:
                        example: "Additional counterparty information required"
                      details:
                        example:
                          requiredFields: ["TAX_ID", "REGISTRATION_NUMBER"]

security:
  - BasicAuth: [] 