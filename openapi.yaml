openapi: 3.1.0
info:
  title: UMA as a Service (UMAaaS) API
  description: |
    API for managing global payments to and from UMA addresses. 
    This service facilitates cross-currency financial transactions using simple human-readable UMA addresses.
  version: 1.0.0
  contact:
    name: Lightspark Support
    email: support@lightspark.com
  license:
    name: Proprietary
    url: https://lightspark.com/terms

# Define tags to control their order in the documentation
tags:
  - name: Platform Configuration
    description: Platform configuration endpoints for managing global settings. You can also configure these settings in the UMAaas dashboard.
  - name: Users
    description: User management endpoints for creating and updating user information
  - name: Transactions
    description: Endpoints for retrieving transaction information
  - name: Sending Payments
    description: Endpoints for creating and managing payment quotes and executing payments
  - name: Webhooks
    description: Webhook endpoints and configuration for receiving notifications
  - name: Invitations
    description: Endpoints for creating, claiming and managing UMA invitations

servers:
  - url: https://api.lightspark.com/umaaas/v1
    description: Production server

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: API token authentication using format `<api token id>:<api client secret>`
    
    WebhookSignature:
      type: apiKey
      in: header
      name: X-UMAaas-Signature
      description: |
        Secp256r1 (P-256) asymmetric signature of the webhook payload, which can be used to verify that the webhook was sent by UMAaas.
        
        To verify the signature:
        1. Get the UMAaas public key provided to you during integration
        2. Decode the base64 signature from the header
        3. Create a SHA-256 hash of the request body
        4. Verify the signature using the public key and the hash
        
        If the signature verification succeeds, the webhook is authentic. If not, it should be rejected.

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

    Address:
      type: object
      required:
        - line1
        - postalCode
        - country
      properties:
        line1:
          type: string
          description: Street address line 1
          example: "123 Main Street"
        line2:
          type: string
          description: Street address line 2
          example: "Apt 4B"
        city:
          type: string
          description: City
          example: "San Francisco"
        state:
          type: string
          description: State/Province/Region
          example: "CA"
        postalCode:
          type: string
          description: Postal/ZIP code
          example: "94105"
        country:
          type: string
          description: Country code (ISO 3166-1 alpha-2)
          example: "US"

    ClabeAccountInfo:
      type: object
      required:
        - clabeNumber
        - bankName
      properties:
        clabeNumber:
          type: string
          description: 18-digit CLABE number (Mexican banking standard)
          example: "123456789012345678"
          minLength: 18
          maxLength: 18
          pattern: "^[0-9]{18}$"
        bankName:
          type: string
          description: Name of the bank
          example: "BBVA Mexico"
        accountHolderName:
          type: string
          description: Name of the account holder
          example: "John Doe"

    UsAccountInfo:
      type: object
      required:
        - accountNumber
        - routingNumber
        - accountCategory
      properties:
        accountNumber:
          type: string
          description: US bank account number
          example: "123456789"
        routingNumber:
          type: string
          description: ACH routing number (9 digits)
          example: "987654321"
          minLength: 9
          maxLength: 9
          pattern: "^[0-9]{9}$"
        accountCategory:
          type: string
          enum: [CHECKING, SAVINGS]
          description: Type of account (checking or savings)
          example: "CHECKING"
        bankName:
          type: string
          description: Name of the bank
          example: "Chase Bank"
        accountHolderName:
          type: string
          description: Name of the account holder
          example: "John Doe"

    PixAccountInfo:
      type: object
      required:
        - pixKey
        - pixKeyType
      properties:
        pixKey:
          type: string
          description: PIX key for Brazilian instant payments
          example: "55119876543210"
        pixKeyType:
          type: string
          enum: [CPF, CNPJ, EMAIL, PHONE, RANDOM]
          description: Type of PIX key being used
          example: "PHONE"
        bankName:
          type: string
          description: Name of the bank
          example: "Nubank"
        accountHolderName:
          type: string
          description: Name of the account holder
          example: "John Doe"

    IbanAccountInfo:
      type: object
      required:
        - iban
        - bankName
      properties:
        iban:
          type: string
          description: International Bank Account Number
          example: "DE89370400440532013000"
          minLength: 15
          maxLength: 34
        swiftBic:
          type: string
          description: SWIFT/BIC code (8 or 11 characters)
          example: "DEUTDEFF"
          minLength: 8
          maxLength: 11
        bankName:
          type: string
          description: Name of the bank
          example: "Deutsche Bank"
        accountHolderName:
          type: string
          description: Name of the account holder
          example: "John Doe"

    BankAccountType:
      type: string
      enum: [CLABE, US_ACCOUNT, PIX, IBAN, FBO]
      description: Type of bank account information

    UserBankAccountInfo:
      type: object
      required:
        - accountType
      properties:
        accountType:
          $ref: '#/components/schemas/BankAccountType'
        platformAccountId:
          type: string
          description: |
            Platform-specific identifier for this bank account. This optional field allows platforms
            to link bank accounts to their internal account systems. The value can be any string
            that helps identify the account in your system (e.g. database IDs, custom references, etc.).

            This field is particularly useful when:
            - Tracking multiple bank accounts for the same user
            - Linking accounts to internal accounting systems
            - Maintaining consistency between UMAaS and your platform's account records
          example: "acc_123456789"
      discriminator:
        propertyName: accountType
        mapping:
          CLABE: '#/components/schemas/UserClabeAccountInfo'
          US_ACCOUNT: '#/components/schemas/UserUsAccountInfo'
          PIX: '#/components/schemas/UserPixAccountInfo'
          IBAN: '#/components/schemas/UserIbanAccountInfo'
          FBO: '#/components/schemas/UserFboAccountInfo'

    UserClabeAccountInfo:
      allOf:
        - $ref: '#/components/schemas/UserBankAccountInfo'
        - $ref: '#/components/schemas/ClabeAccountInfo'
        - type: object

    UserUsAccountInfo:
      allOf:
        - $ref: '#/components/schemas/UserBankAccountInfo'
        - $ref: '#/components/schemas/UsAccountInfo'
        - type: object

    UserPixAccountInfo:
      allOf:
        - $ref: '#/components/schemas/UserBankAccountInfo'
        - $ref: '#/components/schemas/PixAccountInfo'
        - type: object

    UserIbanAccountInfo:
      allOf:
        - $ref: '#/components/schemas/UserBankAccountInfo'
        - $ref: '#/components/schemas/IbanAccountInfo'
        - type: object

    UserFboAccountInfo:
      allOf:
        - $ref: '#/components/schemas/UserBankAccountInfo'
        - type: object
          required:
            - currencyCode
          properties:
            currencyCode:
              type: string
              description: Three-letter currency code (ISO 4217)
              example: "USD"

    PaymentInstructions:
      type: object
      required:
        - reference
        - bankAccountInfo
      properties:
        reference:
          type: string
          description: Unique reference code that must be included with the payment to properly credit it
          example: "UMA-Q12345-REF"
        instructionsNotes:
          type: string
          description: Additional human-readable instructions for making the payment
          example: "Please ensure the reference code is included in the payment memo/description field"
        bankAccountInfo:
          $ref: '#/components/schemas/PaymentBankAccountInfo'

    PaymentBankAccountInfo:
      type: object
      required:
        - accountType
      properties:
        accountType:
          $ref: '#/components/schemas/BankAccountType'
      discriminator:
        propertyName: accountType
        mapping:
          CLABE: '#/components/schemas/PaymentClabeAccountInfo'
          US_ACCOUNT: '#/components/schemas/PaymentUsAccountInfo'
          PIX: '#/components/schemas/PaymentPixAccountInfo'
          IBAN: '#/components/schemas/PaymentIbanAccountInfo'
          FBO: '#/components/schemas/PaymentFboAccountInfo'

    PaymentClabeAccountInfo:
      allOf:
        - $ref: '#/components/schemas/PaymentBankAccountInfo'
        - $ref: '#/components/schemas/ClabeAccountInfo'
        - type: object

    PaymentUsAccountInfo:
      allOf:
        - $ref: '#/components/schemas/PaymentBankAccountInfo'
        - $ref: '#/components/schemas/UsAccountInfo'
        - type: object

    PaymentPixAccountInfo:
      allOf:
        - $ref: '#/components/schemas/PaymentBankAccountInfo'
        - $ref: '#/components/schemas/PixAccountInfo'
        - type: object

    PaymentIbanAccountInfo:
      allOf:
        - $ref: '#/components/schemas/PaymentBankAccountInfo'
        - $ref: '#/components/schemas/IbanAccountInfo'
        - type: object

    PaymentFboAccountInfo:
      allOf:
        - $ref: '#/components/schemas/PaymentBankAccountInfo'
        - type: object
          required:
            - paymentUrl
            - paymentMethod
          properties:
            paymentUrl:
              type: string
              format: uri
              description: The url to make request to in order to confirm payment
              example: "https://api.umaaas.uma.money/confirm"
            paymentMethod:
              type: string
              enum: [POST, GET]
              description: The HTTP method to use for confirming the payment
              example: "POST"

    User:
      type: object
      required:
        - umaAddress
        - platformUserId
        - userType
      properties:
        id:
          type: string
          description: System-generated unique identifier
          readOnly: true
          example: "User:019542f5-b3e7-1d02-0000-000000000001"
        umaAddress:
          type: string
          description: full UMA address
          example: "$john.doe@uma.domain.com"
        platformUserId:
          type: string
          description: Platform-specific user identifier
          example: "9f84e0c2a72c4fa"
        userType:
          type: string
          enum: [INDIVIDUAL, BUSINESS]
          description: Whether the user is an individual or a business entity
          example: "INDIVIDUAL"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          readOnly: true
          example: "2023-07-21T17:32:28Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true
          example: "2023-07-21T17:32:28Z"
        isDeleted:
          type: boolean
          description: Whether the user is marked as deleted
          example: false
          readOnly: true
      discriminator:
        propertyName: userType
        mapping:
          INDIVIDUAL: '#/components/schemas/IndividualUser'
          BUSINESS: '#/components/schemas/BusinessUser'

    IndividualUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - fullName
            - dateOfBirth
            - address
            - bankAccountInfo
          properties:
            fullName:
              type: string
              description: Individual's full name
              example: "John Michael Doe"
            dateOfBirth:
              type: string
              format: date
              description: Date of birth in ISO 8601 format (YYYY-MM-DD)
              example: "1990-01-15"
            nationality:
              type: string
              description: Country code (ISO 3166-1 alpha-2)
              example: "US"
            address:
              $ref: '#/components/schemas/Address'
            bankAccountInfo:
              $ref: '#/components/schemas/UserBankAccountInfo'

    BusinessUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - businessInfo
            - address
            - bankAccountInfo
          properties:
            address:
              $ref: '#/components/schemas/Address'
            bankAccountInfo:
              $ref: '#/components/schemas/UserBankAccountInfo'
            businessInfo:
              type: object
              required:
                - legalName
              description: Additional information required for business entities
              properties:
                legalName:
                  type: string
                  description: Legal name of the business
                  example: "Acme Corporation, Inc."
                registrationNumber:
                  type: string
                  description: Business registration number
                  example: "BRN-123456789"
                taxId:
                  type: string
                  description: Tax identification number
                  example: "EIN-987654321"

    CounterpartyFieldDefinition:
      type: object
      properties:
        name:
          type: string
          enum: [FULL_NAME, DATE_OF_BIRTH, NATIONALITY, PHONE_NUMBER, EMAIL, ADDRESS, TAX_ID, REGISTRATION_NUMBER, ACCOUNT_NUMBER]
          description: Name of the counterparty field
          example: "FULL_NAME"
        mandatory:
          type: boolean
          description: Whether the field is mandatory
          example: true
      required:
        - name
        - mandatory

    PlatformCurrencyConfig:
      type: object
      properties:
        currencyCode:
          type: string
          description: Three-letter currency code (ISO 4217)
          example: "USD"
        minAmount:
          type: integer
          format: int64
          description: Minimum amount that can be sent in the smallest unit of this currency
          minimum: 0
          example: 100
        maxAmount:
          type: integer
          format: int64
          description: Maximum amount that can be sent in the smallest unit of this currency
          minimum: 0
          example: 1000000
        requiredCounterpartyFields:
          type: array
          items:
            $ref: '#/components/schemas/CounterpartyFieldDefinition'
          description: List of counterparty fields and their requirements
          example:
            - name: "FULL_NAME"
              mandatory: true
            - name: "DATE_OF_BIRTH"
              mandatory: true
      required:
        - currencyCode
        - minAmount
        - maxAmount
        - requiredCounterpartyFields

    PlatformConfig:
      type: object
      properties:
        id:
          type: string
          description: System-generated unique identifier
          readOnly: true
          example: "PlatformConfig:019542f5-b3e7-1d02-0000-000000000003"
        umaDomain:
          type: string
          description: UMA domain for this platform
          example: "platform.uma.domain"
        webhookEndpoint:
          type: string
          description: URL where webhook notifications will be sent
          example: "https://api.mycompany.com/webhooks/uma"
        supportedCurrencies:
          type: array
          items:
            $ref: '#/components/schemas/PlatformCurrencyConfig'
          description: List of currencies supported by the platform
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          readOnly: true
          example: "2023-06-15T12:30:45Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true
          example: "2023-06-15T12:30:45Z"

    TransactionStatus:
      type: string
      enum: [CREATED, PENDING, PROCESSING, COMPLETED, REJECTED, FAILED, REFUNDED]
      description: Status of a payment transaction

    TransactionType:
      type: string
      enum: [INCOMING, OUTGOING]
      description: Type of transaction (incoming payment or outgoing payment)

    WebhookType:
      type: string
      enum: [INCOMING_PAYMENT, OUTGOING_PAYMENT, TEST, BULK_UPLOAD, INVITATION_CLAIMED]
      description: Type of webhook event, used by the receiver to identify which webhook is being received

    TestWebhookResponse:
      type: object
      required:
        - response_status
      properties:
        url:
          type: string
          format: uri
          description: URL where the webhook was sent
          example: "https://api.mycompany.com/webhooks/uma"
        response_status:
          type: integer
          description: The HTTP status code returned by the webhook endpoint
          example: 200
        response_body:
          type: string
          description: The raw body content returned by the webhook endpoint in response to the request

    Currency:
      type: object
      properties:
        code:
          type: string
          description: Three-letter currency code (ISO 4217) for fiat currencies. Some cryptocurrencies may use their own ticker symbols (e.g. "SAT" for satoshis, "USDC" for USDCoin, etc.)
          example: "USD"
        name:
          type: string
          description: Full name of the currency
          example: "United States Dollar"
        symbol:
          type: string
          description: Symbol of the currency
          example: "$"
        decimals:
          type: integer
          description: Number of decimal places for the currency
          minimum: 0
          example: 2 # e.g. 123.45

    CurrencyAmount:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: integer
          format: int64
          description: Amount in the smallest unit of the currency (e.g., cents for USD/EUR, satoshis for BTC)
          example: 12550
        currency:
          $ref: '#/components/schemas/Currency'
    
    Transaction:
      type: object
      required:
        - id
        - status
        - type
        - senderUmaAddress
        - receiverUmaAddress
        - userId
        - platformUserId
      properties:
        id:
          type: string
          description: Unique identifier for the transaction
          example: "Transaction:019542f5-b3e7-1d02-0000-000000000004"
        status:
          $ref: '#/components/schemas/TransactionStatus'
        type:
          $ref: '#/components/schemas/TransactionType'
        senderUmaAddress:
          type: string
          description: UMA address of the payment sender
          example: "$sender@external.domain"
        receiverUmaAddress:
          type: string
          description: UMA address of the payment recipient
          example: "$recipient@uma.domain"
        userId:
          type: string
          description: System ID of the user (sender for outgoing, recipient for incoming)
          example: "User:019542f5-b3e7-1d02-0000-000000000001"
        platformUserId:
          type: string
          description: Platform-specific ID of the user (sender for outgoing, recipient for incoming)
          example: "18d3e5f7b4a9c2"
        settledAt:
          type: string
          format: date-time
          description: When the payment was or will be settled
          example: "2023-08-15T14:30:00Z"
        createdAt:
          type: string
          format: date-time
          description: When the transaction was created
          example: "2023-08-15T14:25:18Z"
        description:
          type: string
          description: Optional memo or description for the payment
          example: "Payment for invoice #1234"
        counterpartyInformation:
          type: object
          description: Additional information about the counterparty, if available
          additionalProperties: true
          example:
            fullName: "John Sender"
            country: "DE"

    IncomingTransaction:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - receivedAmount
          properties:
            type:
              $ref: '#/components/schemas/TransactionType'
              example: "INCOMING"
              description: Always "INCOMING" for incoming transactions
            receivedAmount:
              $ref: '#/components/schemas/CurrencyAmount'
              description: Amount received in the recipient's currency

    OutgoingTransaction:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - sentAmount
          properties:
            type:
              $ref: '#/components/schemas/TransactionType'
              example: "OUTGOING"
              description: Always "OUTGOING" for outgoing transactions
            sentAmount:
              $ref: '#/components/schemas/CurrencyAmount'
              description: Amount sent in the sender's currency
            receivedAmount:
              $ref: '#/components/schemas/CurrencyAmount'
              description: Amount to be received by recipient in the recipient's currency
            exchangeRate:
              type: number
              description: Number of sending currency units per receiving currency unit.
              exclusiveMinimum: 0
              example: 1.08
            fees:
              type: integer
              format: int64
              description: The fees associated with the quote in the smallest unit of the sending currency (eg. cents).
              minimum: 0
              example: 10
            quoteId:
              type: string
              description: The ID of the quote that was used to trigger this payment
              example: "Quote:019542f5-b3e7-1d02-0000-000000000006"

    CurrencyPreference:
      type: object
      required:
        - currency
        - estimatedExchangeRate
        - min
        - max
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        estimatedExchangeRate:
          type: number
          description: An estimated exchange rate from the sender's currency to this currency. This is not a locked rate and is subject to change when calling the quotes endpoint.
          exclusiveMinimum: 0
          example: 1.08
        min:
          type: integer
          format: int64
          description: The minimum amount that can be received in this currency.
          exclusiveMinimum: 0
          example: 1
        max:
          type: integer
          format: int64
          description: The maximum amount that can be received in this currency.
          exclusiveMinimum: 0
          example: 1000000
        
        
    QuoteLockSide:
      type: string
      enum: [SENDING, RECEIVING]
      description: >-
        The side of the quote which should be locked and specified in the `lockedCurrencyAmount`.
        For example, if I want to send exactly $5 MXN from my wallet, I would set this to "sending",
        and the `lockedCurrencyAmount` to 500 (in cents). If I want the receiver to receive exactly $10 USD,
        I would set this to "receiving" and the `lockedCurrencyAmount` to 10000 (in cents).
      
    Quote:
      type: object
      required:
        - quoteId
        - sendingCurrency
        - receivingCurrency
        - totalSendingAmount
        - totalReceivingAmount
        - exchangeRate
        - expiresAt
        - feesIncluded
        - paymentInstructions
      properties:
        quoteId:
          type: string
          description: Unique identifier for this quote
          example: "Quote:019542f5-b3e7-1d02-0000-000000000006"
        sendingCurrency:
          $ref: '#/components/schemas/Currency'
        receivingCurrency:
          $ref: '#/components/schemas/Currency'
        totalSendingAmount:
          type: integer
          format: int64
          description: The total amount that will be sent in the smallest unit of the sending currency (eg. cents).
          exclusiveMinimum: 0
          example: 123010
        totalReceivingAmount:
          type: integer
          format: int64
          description: The total amount that will be received in the smallest unit of the receiving currency (eg. cents).
          exclusiveMinimum: 0
          example: 1000
        exchangeRate:
          type: number
          description: Number of sending currency units per receiving currency unit.
          exclusiveMinimum: 0
        expiresAt:
          type: string
          format: date-time
          description: When this quote expires (typically 1-5 minutes after creation)
          example: "2023-09-01T14:30:00Z"
        feesIncluded:
          type: integer
          format: int64
          description: The fees associated with the quote in the smallest unit of the sending currency (eg. cents).
          minimum: 0
          example: 10
        counterpartyInformation:
          type: object
          description: Information about the recipient, as required by the platform in their configuration.
          additionalProperties: true
          example:
            fullName: "Jane Receiver"
            country: "FR"
        paymentInstructions:
          $ref: '#/components/schemas/PaymentInstructions'
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED, EXPIRED]
          description: Current status of the quote
          example: "PENDING"
        transactionId:
          type: string
          description: The ID of the transaction created from this quote. Only present if the quote has started processing.
          example: "Transaction:019542f5-b3e7-1d02-0000-000000000005"
    
    UmaInvitation:
      type: object
      required:
        - code
        - createdAt
        - inviterUma
        - status
        - url
      properties:
        code:
          type: string
          description: The unique code of the invitation
          example: "019542f5"
        createdAt:
          type: string
          format: date-time
          description: When the invitation was created
          example: "2023-09-01T14:30:00Z"
        claimedAt:
          type: string
          format: date-time
          description: When the invitation was claimed if it has been claimed
          example: "2023-09-01T14:30:00Z"
        url:
          type: string
          description: The URL where this invitation can be claimed.
          example: "https://uma.me/i/019542f5"
        expiresAt:
          type: string
          format: date-time
          description: When the invitation expires (if at all)
          example: "2023-09-01T14:30:00Z"
        inviterUma:
          type: string
          description: The UMA address of the inviter
          example: "$inviter@uma.domain"
        inviteeUma:
          type: string
          description: The UMA address of the invitee
          example: "$invitee@uma.domain"
        status:
          type: string
          enum: [PENDING, CLAIMED, EXPIRED, CANCELLED]
          description: The status of the invitation
          example: "PENDING"
        amountToSend:
          $ref: '#/components/schemas/CurrencyAmount'
          description: The amount to send to the invitee when the invitation is claimed. This is optional and if not provided,
            the invitee will not receive any amount. Note that the actual sending of the amount must be done by the inviter
            platform once the INVITATION_CLAIMED webhook is received. If the inviter platform either does not send the payment
            or the payment fails, the invitee will not receive this amount. This field is primarily used for display purposes
            on the claiming side of the invitation.
  
            This field is useful for "send-by-link" style user flows where an inviter can send a payment simply by sharing a
            link without knowing the receiver's UMA address. Note that these sends can only be sender-locked, meaning that the
            sender will not know ahead of time how much the receiver will receive in the receiving currency.
          

    Permission:
      type: string
      enum: [VIEW, TRANSACT, MANAGE]
      description: >- 
        Permission of an API token that determines what actions the token can perform:
        VIEW: Can view all data, including platform config, users and transactions
        TRANSACT: Can send payments
        MANAGE: Can manage platform config, api tokens and users

    ApiToken:
      type: object
      required:
        - id
        - name
        - permissions
        - clientId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: System-generated unique identifier
          example: "Token:019542f5-b3e7-1d02-0000-000000000001"
        name:
          type: string
          description: Name of the token
          example: "Sandbox read-only token"
        permissions:
          type: array
          description: A list of permissions granted to the token
          items:
            $ref: '#/components/schemas/Permission'
        clientId:
          type: string
          description: >- 
            An opaque identifier that should be used as a client_id (or username) 
            in the HTTP Basic Authentication scheme when issuing http requests to UMAaaS.
          example: "01947d2284054f890000e63bca4810df"
        clientSecret:
          type: string
          description: >- 
            The secret that should be used to authenticate against UMAaaS API.
            This secret is not stored and will never be available again after creation. 
            Platform must keep this secret secure as it grants access to the account.
          example: "ed0ad25881e234cc28fb2dec0a4fe64e4172"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-07-21T17:32:28Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-07-21T17:32:28Z"
paths:
  /users:
    post:
      summary: Add a new user
      description: Register a new user in the system with UMA address and bank account information
      operationId: createUser
      tags:
        - Users
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/IndividualUser'
                - $ref: '#/components/schemas/BusinessUser'
            examples:
              individualUser:
                summary: Create individual user example
                value:
                  umaAddress: "$jane.doe@uma.domain.com"
                  platformUserId: "7b3c5a89d2f1e0"
                  userType: "INDIVIDUAL"
                  fullName: "Jane Doe"
                  dateOfBirth: "1992-03-25"
                  address:
                    line1: "123 Pine Street"
                    line2: "Unit 501"
                    city: "Seattle"
                    state: "WA"
                    postalCode: "98101"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    accountNumber: "12345678901"
                    routingNumber: "123456789"
                    accountCategory: "CHECKING"
                    bankName: "Chase Bank"
                    platformAccountId: "chase_primary_1234"
              businessUser:
                summary: Create business user example
                value:
                  umaAddress: "$acme@uma.domain.com"
                  platformUserId: "6e4d2c0b8a9f3"
                  userType: "BUSINESS"
                  businessInfo:
                    legalName: "Acme Corporation"
                    registrationNumber: "BRN-456789123"
                    taxId: "EIN-987123456"
                  address:
                    line1: "400 Commerce Way"
                    city: "Austin"
                    state: "TX"
                    postalCode: "78701"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    accountNumber: "98765432109"
                    routingNumber: "987654321"
                    accountCategory: "CHECKING"
                    bankName: "Bank of America"
                    platformAccountId: "boa_business_5678"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - User with the UMA address already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List users
      description: |
        Retrieve a list of users with optional filtering parameters. Returns all users that match
        the specified filters. If no filters are provided, returns all users (paginated).
      operationId: listUsers
      tags:
        - Users
      security:
        - BasicAuth: []
      parameters:
        - name: platformUserId
          in: query
          description: Filter by platform-specific user identifier
          required: false
          schema:
            type: string
        - name: umaAddress
          in: query
          description: Filter by UMA address
          required: false
          schema:
            type: string
        - name: userType
          in: query
          description: Filter by user type
          required: false
          schema:
            type: string
            enum: [INDIVIDUAL, BUSINESS]
        - name: createdAfter
          in: query
          description: Filter users created after this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: createdBefore
          in: query
          description: Filter users created before this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: updatedAfter
          in: query
          description: Filter users updated after this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: updatedBefore
          in: query
          description: Filter users updated before this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results to return (default 20, max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination (returned from previous request)
          required: false
          schema:
            type: string
        - name: isIncludingDeleted
          in: query
          description: Whether to include deleted users in the results. Default is false.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - hasMore
                properties:
                  data:
                    type: array
                    description: List of users matching the filter criteria
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/IndividualUser'
                        - $ref: '#/components/schemas/BusinessUser'
                  hasMore:
                    type: boolean
                    description: Indicates if more results are available beyond this page
                  nextCursor:
                    type: string
                    description: Cursor to retrieve the next page of results (only present if hasMore is true)
                  totalCount:
                    type: integer
                    description: Total number of users matching the criteria (excluding pagination)
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: System-generated unique user identifier
        required: true
        schema:
          type: string
    get:
      summary: Get user by ID
      description: Retrieve a user by their system-generated ID
      operationId: getUserById
      tags:
        - Users
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user by ID
      description: Update a user's metadata by their system-generated ID
      operationId: updateUserById
      tags:
        - Users
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: individualUpdate
                  properties:
                    umaAddress:
                      type: string
                      description: Full UMA address
                    fullName:
                      type: string
                      description: Individual's full name
                    dateOfBirth:
                      type: string
                      format: date
                      description: Date of birth in ISO 8601 format (YYYY-MM-DD)
                    nationality:
                      type: string
                      description: Country code (ISO 3166-1 alpha-2)
                    address:
                      $ref: '#/components/schemas/Address'
                    bankAccountInfo:
                      $ref: '#/components/schemas/UserBankAccountInfo'
                - type: object
                  title: businessUpdate
                  properties:
                    umaAddress:
                      type: string
                      description: Full UMA address
                    businessInfo:
                      type: object
                      properties:
                        legalName:
                          type: string
                          description: Legal name of the business
                        registrationNumber:
                          type: string
                          description: Business registration number
                        taxId:
                          type: string
                          description: Tax identification number
                    address:
                      $ref: '#/components/schemas/Address'
                    bankAccountInfo:
                      $ref: '#/components/schemas/UserBankAccountInfo'
            examples:
              individualUpdate:
                summary: Update individual user example
                value:
                  userType: "INDIVIDUAL"
                  fullName: "John Smith"
                  dateOfBirth: "1985-06-15"
                  address:
                    line1: "456 Market St"
                    city: "San Francisco"
                    state: "CA"
                    postalCode: "94103"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    accountNumber: "11122233344"
                    routingNumber: "111222333"
                    accountCategory: "CHECKING"
                    bankName: "Wells Fargo"
                    platformAccountId: "wf_checking_9012"
              businessUpdate:
                summary: Update business user example
                value:
                  userType: "BUSINESS"
                  businessInfo:
                    legalName: "New Tech Solutions LLC"
                    registrationNumber: "BRN-987654321"
                    taxId: "EIN-123456789"
                  address:
                    line1: "100 Technology Parkway"
                    city: "Palo Alto"
                    state: "CA"
                    postalCode: "94304"
                    country: "US"
                  bankAccountInfo:
                    accountType: "US_ACCOUNT"
                    accountNumber: "55566677788"
                    routingNumber: "555666777"
                    accountCategory: "CHECKING"
                    bankName: "JP Morgan Chase"
                    platformAccountId: "chase_business_3456"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user by ID
      description: Delete a user by their system-generated ID
      operationId: deleteUserById
      tags:
        - Users
      security:
        - BasicAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndividualUser'
                  - $ref: '#/components/schemas/BusinessUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '410':
          description: User deleted already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens:
    post:
      summary: Create a new API token
      description: Create a new API token to access the UMAaaS APIs.
      operationId: createToken
      tags:
        - API Tokens
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: tokenCreate
              properties:
                name:
                  type: string
                  description: Name of the token to help identify it
                  example: "Sandbox read-only"
                permissions:
                  type: array
                  description: A list of permissions to grant to the token
                  items:
                    $ref: '#/components/schemas/Permission'
              required:
                - name
                - permissions
      responses:
        '201':
          description: API token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List tokens
      description: |
        Retrieve a list of API tokens with optional filtering parameters. Returns all tokens that match
        the specified filters. If no filters are provided, returns all tokens (paginated).
      operationId: listTokens
      tags:
        - API Tokens
      security:
        - BasicAuth: []
      parameters:
        - name: name
          in: query
          description: Filter by name of the token
          required: false
          schema:
            type: string
        - name: createdAfter
          in: query
          description: Filter users created after this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: createdBefore
          in: query
          description: Filter users created before this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: updatedAfter
          in: query
          description: Filter users updated after this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: updatedBefore
          in: query
          description: Filter users updated before this timestamp (inclusive)
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results to return (default 20, max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination (returned from previous request)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - hasMore
                properties:
                  data:
                    type: array
                    description: List of tokens matching the filter criteria
                    items:
                      $ref: '#/components/schemas/ApiToken'
                  hasMore:
                    type: boolean
                    description: Indicates if more results are available beyond this page
                  nextCursor:
                    type: string
                    description: Cursor to retrieve the next page of results (only present if hasMore is true)
                  totalCount:
                    type: integer
                    description: Total number of tokens matching the criteria (excluding pagination)
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tokens/{tokenId}:
    parameters:
      - name: tokenId
        in: path
        description: System-generated unique token identifier
        required: true
        schema:
          type: string
    get:
      summary: Get API token by ID
      description: Retrieve an API token by their system-generated ID
      operationId: getTokenById
      tags:
        - API Tokens
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete API token by ID
      description: Delete an API token by their system-generated ID
      operationId: deleteTokenById
      tags:
        - API Tokens
      security:
        - BasicAuth: []
      responses:
        '204':
          description: API token deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /config:
    get:
      summary: Get platform configuration
      description: Retrieve the current platform configuration
      operationId: getPlatformConfig
      tags:
        - Platform Configuration
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformConfig'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update platform configuration
      description: Update the platform configuration settings
      operationId: updatePlatformConfig
      tags:
        - Platform Configuration
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                umaDomain:
                  type: string
                  example: "mycompany.com"
                webhookEndpoint:
                  type: string
                  example: "https://api.mycompany.com/webhooks/uma"
                supportedCurrencies:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlatformCurrencyConfig'
            example:
              umaDomain: "mycompany.com"
              webhookEndpoint: "https://api.mycompany.com/webhooks/uma"
              supportedCurrencies:
                - currencyCode: "USD"
                  minAmount: 100
                  maxAmount: 1000000
                  requiredCounterpartyFields:
                    - name: "FULL_NAME"
                      mandatory: true
                    - name: "NATIONALITY"
                      mandatory: true
                    - name: "DATE_OF_BIRTH"
                      mandatory: true
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformConfig'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/test:
    post:
      summary: Send a test webhook
      description: Send a test webhook to the configured endpoint
      operationId: sendTestWebhook
      tags:
        - Webhooks
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Webhook delivered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestWebhookResponse'
        '400':
          description: Bad request - Webhook delivery failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{transactionId}:
    parameters:
      - name: transactionId
        in: path
        description: Unique identifier of the transaction
        required: true
        schema:
          type: string
    get:
      summary: Get transaction by ID
      description: Retrieve detailed information about a specific transaction
      operationId: getTransactionById
      tags:
        - Transactions
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IncomingTransaction'
                  - $ref: '#/components/schemas/OutgoingTransaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions:
    get:
      summary: List transactions
      description: |
        Retrieve a paginated list of transactions with optional filtering.
        The transactions can be filtered by user ID, platform user ID, UMA address, 
        date range, status, and transaction type.
      operationId: listTransactions
      tags:
        - Transactions
      security:
        - BasicAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by system user ID
          required: false
          schema:
            type: string
        - name: platformUserId
          in: query
          description: Filter by platform-specific user ID
          required: false
          schema:
            type: string
        - name: umaAddress
          in: query
          description: Filter by UMA address (either sender or receiver)
          required: false
          schema:
            type: string
        - name: senderUmaAddress
          in: query
          description: Filter by sender UMA address
          required: false
          schema:
            type: string
        - name: receiverUmaAddress
          in: query
          description: Filter by receiver UMA address
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: type
          in: query
          description: Filter by transaction type
          required: false
          schema:
            $ref: '#/components/schemas/TransactionType'
        - name: startDate
          in: query
          description: Filter by start date (inclusive) in ISO 8601 format
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter by end date (inclusive) in ISO 8601 format
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results to return (default 20, max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination (returned from previous request)
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Order to sort results in
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - hasMore
                properties:
                  data:
                    type: array
                    description: List of transactions matching the criteria
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/IncomingTransaction'
                        - $ref: '#/components/schemas/OutgoingTransaction'
                  hasMore:
                    type: boolean
                    description: Indicates if more results are available beyond this page
                  nextCursor:
                    type: string
                    description: Cursor to retrieve the next page of results (only present if hasMore is true)
                  totalCount:
                    type: integer
                    description: Total number of transactions matching the criteria (excluding pagination)
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /receiver/{receiverUmaAddress}:
    get:
      summary: Look up a UMA address for payment
      description: |
        Lookup a receiving UMA address to determine supported currencies and exchange rates.
        This endpoint helps platforms determine what currencies they can send to a given UMA address.
      operationId: lookupUma
      tags:
        - Sending Payments
      security:
        - BasicAuth: []
      parameters:
        - name: receiverUmaAddress
          in: path
          description: UMA address of the intended recipient
          required: true
          schema:
            type: string
        - name: senderUmaAddress
          in: query
          description: UMA address of the sender (optional if userId is provided)
          required: false
          schema:
            type: string
        - name: userId
          in: query
          description: System ID of the sender (optional if senderUmaAddress is provided)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful lookup
          content:
            application/json:
              schema:
                type: object
                required:
                  - receiverUmaAddress
                  - supportedCurrencies
                  - lookupId
                properties:
                  receiverUmaAddress:
                    type: string
                    description: The UMA address that was looked up
                    example: "$receiver@uma.domain"
                  supportedCurrencies:
                    type: array
                    description: List of currencies supported by the receiving UMA address
                    items:
                      $ref: '#/components/schemas/CurrencyPreference'
                  requiredPayerDataFields:
                    type: array
                    description: Fields required by the receiving institution about the payer before payment can be completed
                    items:
                      $ref: '#/components/schemas/CounterpartyFieldDefinition'
                  lookupId:
                    type: string
                    description: Unique identifier for the lookup. Needed in the subsequent create quote request.
                    example: "Lookup:019542f5-b3e7-1d02-0000-000000000009"
        '400':
          description: Bad request - Missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: UMA address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /quotes:
    post:
      summary: Create a payment quote
      description: |
        Generate a quote for a payment from one UMA address to another.
        The quote locks in exchange rates and fees for a set period of time and provides
        payment instructions that can be used to execute the payment.
        
        Depending on the `lockedCurrencySide` parameter, either the sending amount or 
        receiving amount will be locked.
        
        The returned quote includes payment instructions with the banking details
        needed to execute the payment and fulfill the quote. These instructions
        must be followed precisely, including any reference codes provided.
      operationId: createQuote
      tags:
        - Sending Payments
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - lookupId
                - sendingCurrencyCode
                - receivingCurrencyCode
                - lockedCurrencySide
                - lockedCurrencyAmount
              properties:
                lookupId:
                  type: string
                  description: Unique identifier for the prior receiver uma address lookup request.
                  example: "LookupRequest:019542f5-b3e7-1d02-0000-000000000009"
                sendingCurrencyCode:
                  type: string
                  description: Currency code for the sending amount
                  example: "USD"
                receivingCurrencyCode:
                  type: string
                  description: Currency code for the receiving amount
                  example: "EUR"
                lockedCurrencySide:
                  $ref: '#/components/schemas/QuoteLockSide'
                lockedCurrencyAmount:
                  type: integer
                  format: int64
                  description: >-
                    The amount to send/receive in the smallest unit of the locked currency (eg. cents).
                    See `lockedCurrencySide` for more information.
                  exclusiveMinimum: 0
                  example: 1000
                description:
                  type: string
                  description: Optional description/memo for the payment
                  example: "Invoice #1234 payment"
            examples:
              lockSendAmount:
                summary: Lock sending amount
                value:
                  lookupId: "LookupRequest:019542f5-b3e7-1d02-0000-000000000009"
                  sendingCurrencyCode: "USD"
                  receivingCurrencyCode: "EUR"
                  lockedCurrencySide: "SENDING"
                  lockedCurrencyAmount: 1000
                  description: "Payment for invoice #1234"
              lockReceiveAmount:
                summary: Lock receiving amount
                value:
                  lookupId: "LookupRequest:019542f5-b3e7-1d02-0000-000000000009"
                  sendingCurrencyCode: "USD"
                  receivingCurrencyCode: "EUR"
                  lockedCurrencySide: "RECEIVING"
                  lockedCurrencyAmount: 9200
      responses:
        '201':
          description: |
            Quote created successfully. The response includes payment instructions
            that the client can use to execute the payment through their banking provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        '400':
          description: Bad request - Missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: |
            Unprocessable Entity - Additional counterparty information required,
            or the payment cannot be completed for another reason.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      code:
                        example: "additional_info_required"
                      message:
                        example: "Additional counterparty information required"
                      details:
                        example:
                          requiredFields: ["TAX_ID", "REGISTRATION_NUMBER"]

  /quotes/{quoteId}:
    get:
      summary: Get quote by ID
      description: |
        Retrieve a quote by its ID. If the quote has been settled, it will include 
        the transaction ID. This allows clients to track the full lifecycle of a payment
        from quote creation to settlement.
      operationId: getQuoteById
      tags:
        - Sending Payments
      security:
        - BasicAuth: []
      parameters:
        - name: quoteId
          in: path
          description: ID of the quote to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Quote retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Quote not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payments/status/{quoteId}:
    get:
      summary: Check payment status for a quote
      description: |
        Check the status of a payment associated with a previously created quote.
        This allows clients to verify if a payment they've initiated using the 
        payment instructions has been received and processed.
      operationId: getPaymentStatus
      tags:
        - Sending Payments
      security:
        - BasicAuth: []
      parameters:
        - name: quoteId
          in: path
          description: ID of the quote to check payment status for
          required: true
          schema:
            type: string
        - name: reference
          in: query
          description: Payment reference code (optional, but helps with verification)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - quoteId
                  - status
                properties:
                  quoteId:
                    type: string
                    description: ID of the quote
                    example: "Quote:019542f5-b3e7-1d02-0000-000000000006"
                  status:
                    type: string
                    enum: [PENDING, RECEIVED, PROCESSING, COMPLETED, FAILED, EXPIRED]
                    description: Current status of the payment
                    example: "RECEIVED"
                  statusMessage:
                    type: string
                    description: Human-readable description of the current status
                    example: "Payment received and being processed"
                  transaction:
                    $ref: '#/components/schemas/OutgoingTransaction'
                    description: Transaction details if the payment has been received and is being processed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Quote not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/bulk/csv:
    post:
      summary: Upload users via CSV file
      description: |
        Upload a CSV file containing user information for bulk creation. The CSV file should follow
        a specific format with required and optional columns based on user type.
        
        ### CSV Format
        The CSV file should have the following columns:
        
        Required columns for all users:
        - umaAddress: The user's UMA address (e.g., $john.doe@uma.domain.com)
        - platformUserId: Your platform's unique identifier for the user
        - userType: Either "INDIVIDUAL" or "BUSINESS"
        
        Required columns for individual users:
        - fullName: Individual's full name
        - dateOfBirth: Date of birth in YYYY-MM-DD format
        - addressLine1: Street address line 1
        - city: City
        - state: State/Province/Region
        - postalCode: Postal/ZIP code
        - country: Country code (ISO 3166-1 alpha-2)
        - accountType: Bank account type (CLABE, US_ACCOUNT, PIX, IBAN)
        - accountNumber: Bank account number
        - bankName: Name of the bank
        
        Required columns for business users:
        - businessLegalName: Legal name of the business
        - addressLine1: Street address line 1
        - city: City
        - state: State/Province/Region
        - postalCode: Postal/ZIP code
        - country: Country code (ISO 3166-1 alpha-2)
        - accountType: Bank account type (CLABE, US_ACCOUNT, PIX, IBAN)
        - accountNumber: Bank account number
        - bankName: Name of the bank
        
        Optional columns for all users:
        - addressLine2: Street address line 2
        - platformAccountId: Your platform's identifier for the bank account
        - description: Optional description for the user
        
        Optional columns for individual users:
        - email: User's email address
        
        Optional columns for business users:
        - businessRegistrationNumber: Business registration number
        - businessTaxId: Tax identification number
        
        Additional required columns based on account type:
        
        For US_ACCOUNT:
        - routingNumber: ACH routing number (9 digits)
        - accountCategory: Either "CHECKING" or "SAVINGS"
        
        For CLABE:
        - clabeNumber: 18-digit CLABE number
        
        For PIX:
        - pixKey: PIX key value
        - pixKeyType: Type of PIX key (CPF, CNPJ, EMAIL, PHONE, RANDOM)
        
        For IBAN:
        - iban: International Bank Account Number
        - swiftBic: SWIFT/BIC code (8 or 11 characters)

        See the UserBankAccountInfo and UserInfo schemas for more details on the required and optional fields.
        
        ### Example CSV
        ```csv
        umaAddress,platformUserId,userType,fullName,dateOfBirth,addressLine1,city,state,postalCode,country,accountType,accountNumber,bankName,platformAccountId
        $john.doe@uma.domain.com,user123,INDIVIDUAL,John Doe,1990-01-15,123 Main St,San Francisco,CA,94105,US,US_ACCOUNT,123456789,Chase Bank,chase_primary_1234
        $acme@uma.domain.com,biz456,BUSINESS,Acme Corp,400 Commerce Way,Austin,TX,78701,US,US_ACCOUNT,987654321,Bank of America,boa_business_5678
        ```
        
        The upload process is asynchronous and will return a job ID that can be used to track progress.
        You can monitor the job status using the `/users/bulk/jobs/{jobId}` endpoint.
      operationId: uploadUsersCsv
      tags:
        - Users
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV file containing user information
                webhookUrl:
                  type: string
                  description: Optional webhook URL for job status updates. If not provided, the platform's default webhook URL will be used.
                  format: uri
      responses:
        '202':
          description: CSV upload accepted for processing
          content:
            application/json:
              schema:
                type: object
                required:
                  - jobId
                  - status
                properties:
                  jobId:
                    type: string
                    description: Unique identifier for the bulk import job
                  status:
                    type: string
                    enum: [PENDING, PROCESSING]
                  validationSummary:
                    type: object
                    description: Summary of CSV validation results
                    properties:
                      totalRows:
                        type: integer
                        description: Total number of rows in the CSV file
                      validRows:
                        type: integer
                        description: Number of rows that passed initial validation
                      invalidRows:
                        type: integer
                        description: Number of rows that failed validation
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            row:
                              type: integer
                              description: Row number in the CSV file (1-based)
                            errors:
                              type: array
                              items:
                                type: string
        '400':
          description: Bad request - Invalid CSV format or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/bulk/jobs/{jobId}:
    get:
      summary: Get bulk import job status
      description: |
        Retrieve the current status and results of a bulk user import job. This endpoint can be used
        to track the progress of both CSV uploads.
        
        The response includes:
        - Overall job status
        - Progress statistics
        - Detailed error information for failed entries
        - Completion timestamp when finished
      operationId: getBulkUserImportJob
      tags:
        - Users
      security:
        - BasicAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of the bulk import job to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - jobId
                  - status
                  - progress
                properties:
                  jobId:
                    type: string
                    description: Unique identifier for the bulk import job
                    example: "job_123456789"
                  status:
                    type: string
                    enum: [PENDING, PROCESSING, COMPLETED, FAILED]
                    description: Current status of the job
                    example: "PROCESSING"
                  progress:
                    type: object
                    required:
                      - total
                      - processed
                      - successful
                      - failed
                    properties:
                      total:
                        type: integer
                        description: Total number of users to process
                        example: 5000
                      processed:
                        type: integer
                        description: Number of users processed so far
                        example: 2500
                      successful:
                        type: integer
                        description: Number of users successfully created
                        example: 2450
                      failed:
                        type: integer
                        description: Number of users that failed to create
                        example: 50
                  errors:
                    type: array
                    description: Detailed error information for failed entries
                    items:
                      type: object
                      required:
                        - correlationId
                        - error
                      properties:
                        correlationId:
                          type: string
                          description: Platform user ID or row number for the failed entry
                          example: "biz456"
                        error:
                          $ref: '#/components/schemas/Error'
                  completedAt:
                    type: string
                    format: date-time
                    description: Timestamp when the job completed (only present for COMPLETED or FAILED status)
                    example: "2023-08-15T14:32:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /invitations:
    post:
      summary: Create an UMA invitation from a given platform user.
      description: |
        Create an UMA invitation from a given platform user.
      operationId: createInvitation
      tags:
        - Invitations
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - inviterUma
              properties:
                inviterUma:
                  type: string
                  description: The UMA address of the user creating the invitation
                  example: "$inviter@uma.domain"
                amountToSend:
                  description: |
                    An amount to send to the invitee when the invitation is claimed. This is optional and if not provided,
                    the invitee will not receive any amount. Note that the actual sending of the amount must be done by the
                    inviter platform once the INVITATION_CLAIMED webhook is received. If the inviter platform either does not
                    send the payment or the payment fails, the invitee will not receive this amount. This field is primarily used
                    for display purposes on the claiming side of the invitation.
                  type: object
                  properties:
                    amount:
                      type: integer
                      format: int64
                      description: Amount in the smallest unit of the currency (e.g., cents for USD/EUR, satoshis for BTC)
                      example: 12550
                    currencyCode:
                      type: string
                      description: Three-letter currency code (ISO 4217) for fiat currencies. Some cryptocurrencies may use their own ticker symbols (e.g. "SAT" for satoshis, "USDC" for USDCoin, etc.)
                      example: "USD"
                expiresAt:
                  type: string
                  format: date-time
                  description: When the invitation expires (if at all)
                  example: "2023-09-01T14:30:00Z"
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UmaInvitation'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /invitations/{invitationCode}:
    get:
      summary: Get a specific UMA invitation by code.
      description: |
        Get a specific UMA invitation by code.
      operationId: getInvitation
      tags:
        - Invitations
      security:
        - BasicAuth: []
      parameters:
        - name: invitationCode
          in: path
          description: The code of the invitation to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UmaInvitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /invitations/{invitationCode}/claim:
    post:
      summary: Claim an UMA invitation
      description: |
        Claim an UMA invitation by associating it with an invitee UMA address.
        
        When an invitation is successfully claimed:
        1. The invitation status changes from PENDING to CLAIMED
        2. The invitee UMA address is associated with the invitation
        3. An INVITATION_CLAIMED webhook is triggered to notify the platform that created the invitation
        
        This endpoint allows users to accept invitations sent to them by other UMA users.
      operationId: claimInvitation
      tags:
        - Invitations
      security:
        - BasicAuth: []
      parameters:
        - name: invitationCode
          in: path
          description: The code of the invitation to claim
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - inviteeUma
              properties:
                inviteeUma:
                  type: string
                  description: The UMA address of the user claiming the invitation
                  example: "$invitee@uma.domain"
      responses:
        '200':
          description: Invitation claimed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UmaInvitation'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /invitations/{invitationCode}/cancel:
    post:
      summary: Cancel an UMA invitation
      description: |
        Cancel a pending UMA invitation. Only the inviter or platform can cancel an invitation.
        
        When an invitation is cancelled:
        1. The invitation status changes from PENDING to CANCELLED
        2. The invitation can no longer be claimed
        3. The invitation URL will show as cancelled when accessed
        
        Only pending invitations can be cancelled. Attempting to cancel an invitation
        that is already claimed, expired, or cancelled will result in an error.
      operationId: cancelInvitation
      tags:
        - Invitations
      security:
        - BasicAuth: []
      parameters:
        - name: invitationCode
          in: path
          description: The code of the invitation to cancel
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UmaInvitation'
        '400':
          description: Bad request - Invitation cannot be cancelled (already claimed, expired, or cancelled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only the platform which created the invitation can cancel it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sandbox/send:
    post:
      summary: Simulate sending funds
      description: |
        Simulate sending funds to the bank account as instructed in the quote. 
        This endpoint is only for the sandbox environment and will fail for production platforms/keys.
      operationId: testSend
      tags:
        - Sandbox
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reference
                - currencyCode
                - currencyAmount
              properties:
                reference:
                  type: string
                  description: The unique reference code that was in the payment instructions
                  example: "UMA-Q12345-REF"
                currencyCode:
                  type: string
                  description: Currency code for the funds to be sent
                  example: "USD"
                currencyAmount:
                  type: integer
                  format: int64
                  description: The amount to send in the smallest unit of the currency (eg. cents)
                  exclusiveMinimum: 0
                  example: 1000
      responses:
        '200':
          description: Funds received successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - request was made with a production platform token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Reference not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sandbox/receive:
    post:
      summary: Simulate payment send to test receiving a payment
      description: |
        Simulate sending payment from an sandbox uma address to a platform user to test payment receive.
        This endpoint is only for the sandbox environment and will fail for production platforms/keys.
      operationId: testReceive
      tags:
        - Sandbox
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - senderUmaAddress
                - receivingCurrencyCode
                - receivingCurrencyAmount
              properties:
                senderUmaAddress:
                  type: string
                  description: UMA address of the sender from the sandbox
                  example: "$success.usd@sandbox.uma.money"
                receiverUmaAddress:
                  type: string
                  description: UMA address of the receiver (optional if userId is provided)
                  example: "$receiver@uma.domain"
                userId:
                  type: string
                  description: System ID of the receiver (optional if receiverUmaAddress is provided)
                  example: "User:019542f5-b3e7-1d02-0000-000000000001"
                receivingCurrencyCode:
                  type: string
                  description: The currency code for the receiving amount
                  example: "USD"
                receivingCurrencyAmount:
                  type: integer
                  format: int64
                  description: The amount to be received in the smallest unit of the currency (eg. cents)
                  exclusiveMinimum: 0
                  example: 1000
      responses:
        '200':
          description: Payment triggered successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - request was made with a production platform token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Sender or receiver not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

webhooks:
  incoming-payment:
    post:
      summary: Incoming payment webhook and approval mechanism
      description: |
        Webhook that is called when an incoming payment is received by a user's UMA address.
        This endpoint should be implemented by clients of the UMAaas API.
        
        ### Authentication
        The webhook includes a signature in the `X-UMAaas-Signature` header that allows you to verify that the webhook was sent by UMAaas.
        To verify the signature:
        1. Get the webhook secret provided to you during integration
        2. Create an HMAC-SHA256 hash of the entire request body (as a raw string) using the webhook secret as the key
        3. Encode the hash in hexadecimal format
        4. Compare this value to the signature in the `X-UMAaas-Signature` header
        
        If the values match, the webhook is authentic. If not, it should be rejected.
        
        ### Payment Approval Flow
        When a transaction has `status: "PENDING"`, this webhook serves as an approval mechanism:
        
        1. The client should check the `counterpartyInformation` against their requirements
        2. To APPROVE the payment, return a 200 OK response
        3. To REJECT the payment, return a 403 Forbidden response with an Error object
        4. To request more information, return a 422 Unprocessable Entity with specific missing fields
        
        The UMAaas system will proceed or cancel the payment based on your response.
        
        For transactions with other statuses (COMPLETED, FAILED, REFUNDED), this webhook is purely informational.
      operationId: incomingPaymentWebhook
      tags:
        - Webhooks
      security:
        - WebhookSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transaction
                - timestamp
                - webhookId
                - type
              properties:
                transaction:
                  $ref: '#/components/schemas/IncomingTransaction'
                timestamp:
                  type: string
                  format: date-time
                  description: ISO8601 timestamp when the webhook was sent (can be used to prevent replay attacks)
                  example: "2023-08-15T14:32:00Z"
                webhookId:
                  type: string
                  description: Unique identifier for this webhook delivery (can be used for idempotency)
                  example: "Webhook:019542f5-b3e7-1d02-0000-000000000007"
                type:
                  $ref: '#/components/schemas/WebhookType'
                  description: Type of webhook event
                  example: "INCOMING_PAYMENT"
            examples:
              pendingPayment:
                summary: Pending payment example requiring approval
                value:
                  transaction:
                    id: "Transaction:019542f5-b3e7-1d02-0000-000000000005"
                    status: "PENDING"
                    type: "INCOMING"
                    senderUmaAddress: "$sender@external.domain"
                    receiverUmaAddress: "$recipient@uma.domain"
                    receivedAmount:
                      amount: 50000
                      currency: 
                        code: "USD"
                        name: "United States Dollar"
                        symbol: "$"
                        decimals: 2
                    userId: "User:019542f5-b3e7-1d02-0000-000000000001"
                    platformUserId: "18d3e5f7b4a9c2"
                    counterpartyInformation:
                      fullName: "John Sender"
                      dateOfBirth: "1985-06-15"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000007"
                  type: "INCOMING_PAYMENT"
              incomingCompletedPayment:
                summary: Completed payment notification
                value:
                  transaction:
                    id: "Transaction:019542f5-b3e7-1d02-0000-000000000005"
                    status: "COMPLETED"
                    type: "INCOMING"
                    senderUmaAddress: "$sender@external.domain"
                    receiverUmaAddress: "$recipient@uma.domain"
                    receivedAmount:
                      amount: 50000
                      currency: 
                        code: "USD"
                        name: "United States Dollar"
                        symbol: "$"
                        decimals: 2
                    userId: "User:019542f5-b3e7-1d02-0000-000000000001"
                    platformUserId: "18d3e5f7b4a9c2"
                    settlementTime: "2023-08-15T14:30:00Z"
                    createdAt: "2023-08-15T14:25:18Z"
                    description: "Payment for services"
                    exchangeRate: 0.92
                    quoteId: "Quote:019542f5-b3e7-1d02-0000-000000000006"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000007"
                  type: "INCOMING_PAYMENT"
      responses:
        '200':
          description: |
            Webhook received successfully. 
            For PENDING transactions, this indicates approval to proceed with the payment.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: |
            Forbidden - Payment rejected by the client.
            Only applicable for PENDING transactions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      code:
                        example: "payment_rejected"
                      message:
                        example: "Payment rejected due to compliance policy"
                      details:
                        example:
                          reason: "failed_counterparty_check"
                          rejectionReason: "User is in a restricted jurisdiction"
        '409':
          description: Conflict - Webhook has already been processed (duplicate webhookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: |
            Unprocessable Entity - Additional counterparty information required.
            Only applicable for PENDING transactions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      code:
                        example: "additional_info_required"
                      message:
                        example: "Additional counterparty information required"
                      details:
                        example:
                          requiredFields: ["TAX_ID", "REGISTRATION_NUMBER"]

  outgoing-payment:
    post:
      summary: Outgoing payment status webhook
      description: |
        Webhook that is called when an outgoing payment's status changes.
        This endpoint should be implemented by clients of the UMAaas API.
        
        ### Authentication
        The webhook includes a signature in the `X-UMAaas-Signature` header that allows you to verify that the webhook was sent by UMAaas.
        To verify the signature:
        1. Get the webhook secret provided to you during integration
        2. Create an HMAC-SHA256 hash of the entire request body (as a raw string) using the webhook secret as the key
        3. Encode the hash in hexadecimal format
        4. Compare this value to the signature in the `X-UMAaas-Signature` header
        
        If the values match, the webhook is authentic. If not, it should be rejected.
        
        This webhook is informational only and is sent when an outgoing payment completes successfully or fails.
      operationId: outgoingPaymentWebhook
      tags:
        - Webhooks
      security:
        - WebhookSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transaction
                - timestamp
                - webhookId
                - type
              properties:
                transaction:
                  $ref: '#/components/schemas/OutgoingTransaction'
                timestamp:
                  type: string
                  format: date-time
                  description: ISO8601 timestamp when the webhook was sent (can be used to prevent replay attacks)
                  example: "2023-08-15T14:32:00Z"
                webhookId:
                  type: string
                  description: Unique identifier for this webhook delivery (can be used for idempotency)
                  example: "Webhook:019542f5-b3e7-1d02-0000-000000000007"
                type:
                  $ref: '#/components/schemas/WebhookType'
                  description: Type of webhook event
                  example: "OUTGOING_PAYMENT"
            examples:
              outgoingCompletedPayment:
                summary: Completed outgoing payment
                value:
                  transaction:
                    id: "Transaction:019542f5-b3e7-1d02-0000-000000000005"
                    status: "COMPLETED"
                    type: "OUTGOING"
                    senderUmaAddress: "$sender@uma.domain"
                    receiverUmaAddress: "$recipient@external.domain"
                    sentAmount:
                      amount: 10550
                      currency: 
                        code: "USD"
                        name: "United States Dollar"
                        symbol: "$"
                        decimals: 2
                    receivedAmount:
                      amount: 9706
                      currency: 
                        code: "EUR"
                        name: "Euro"
                        symbol: "€"
                        decimals: 2
                    userId: "User:019542f5-b3e7-1d02-0000-000000000001"
                    platformUserId: "18d3e5f7b4a9c2"
                    settlementTime: "2023-08-15T14:30:00Z"
                    createdAt: "2023-08-15T14:25:18Z"
                    description: "Payment for invoice #1234"
                    exchangeRate: 0.92
                    quoteId: "Quote:019542f5-b3e7-1d02-0000-000000000006"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000007"
                  type: "OUTGOING_PAYMENT"
              failedPayment:
                summary: Failed outgoing payment
                value:
                  transaction:
                    id: "Transaction:019542f5-b3e7-1d02-0000-000000000005"
                    status: "FAILED"
                    type: "OUTGOING"
                    senderUmaAddress: "$sender@uma.domain"
                    receiverUmaAddress: "$recipient@external.domain"
                    sentAmount:
                      amount: 10550
                      currency: 
                        code: "USD"
                        name: "United States Dollar"
                        symbol: "$"
                        decimals: 2
                    userId: "User:019542f5-b3e7-1d02-0000-000000000001"
                    platformUserId: "18d3e5f7b4a9c2"
                    createdAt: "2023-08-15T14:25:18Z"
                    quoteId: "Quote:019542f5-b3e7-1d02-0000-000000000006"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000007"
                  type: "OUTGOING_PAYMENT"
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Webhook has already been processed (duplicate webhookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  test-webhook:
    post:
      summary: Test webhook for integration verification
      description: |
        Webhook that is sent once to verify your webhook endpoint is correctly set up.
        This is sent when you configure or update your platform settings with a webhook URL.
        
        ### Authentication
        The webhook includes a signature in the `X-UMAaaS-Signature` header that allows you to verify that the webhook was sent by UMAaaS.
        To verify the signature:
        1. Get the webhook secret provided to you during integration
        2. Create an HMAC-SHA256 hash of the entire request body (as a raw string) using the webhook secret as the key
        3. Encode the hash in hexadecimal format
        4. Compare this value to the signature in the `X-UMAaaS-Signature` header
        
        If the values match, the webhook is authentic. If not, it should be rejected.
        
        This webhook is purely for testing your endpoint integration and signature verification.
      operationId: testWebhook
      tags:
        - Webhooks
      security:
        - WebhookSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timestamp
                - webhookId
                - type
              properties:
                timestamp:
                  type: string
                  format: date-time
                  description: ISO8601 timestamp when the webhook was sent (can be used to prevent replay attacks)
                  example: "2023-08-15T14:32:00Z"
                webhookId:
                  type: string
                  description: Unique identifier for this webhook delivery (can be used for idempotency)
                  example: "Webhook:019542f5-b3e7-1d02-0000-000000000001"
                type:
                  $ref: '#/components/schemas/WebhookType'
                  description: Type of webhook event
                  example: "TEST"
            examples:
              testWebhook:
                summary: Test webhook example
                value:
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000001"
                  type: "TEST"
      responses:
        '200':
          description: Webhook received successfully. This confirms your webhook endpoint is properly configured.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Webhook has already been processed (duplicate webhookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  bulk-upload:
    post:
      summary: Bulk upload status webhook
      description: |
        Webhook that is called when a bulk user upload job completes or fails.
        This endpoint should be implemented by clients of the UMAaas API.
        
        ### Authentication
        The webhook includes a signature in the `X-UMAaas-Signature` header that allows you to verify that the webhook was sent by UMAaas.
        To verify the signature:
        1. Get the webhook secret provided to you during integration
        2. Create an HMAC-SHA256 hash of the entire request body (as a raw string) using the webhook secret as the key
        3. Encode the hash in hexadecimal format
        4. Compare this value to the signature in the `X-UMAaas-Signature` header
        
        If the values match, the webhook is authentic. If not, it should be rejected.
        
        This webhook is sent when a bulk upload job completes or fails, providing detailed information about the results.
      operationId: bulkUploadWebhook
      tags:
        - Webhooks
      security:
        - WebhookSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobId
                - status
                - timestamp
                - webhookId
                - type
                - progress
              properties:
                jobId:
                  type: string
                  description: ID of the bulk upload job
                  example: "job_123456789"
                status:
                  type: string
                  enum: [SUCCESS, PARTIAL_SUCCESS, FAILED]
                  description: Final status of the bulk upload job
                  example: "SUCCESS"
                timestamp:
                  type: string
                  format: date-time
                  description: ISO8601 timestamp when the webhook was sent
                  example: "2023-08-15T14:32:00Z"
                webhookId:
                  type: string
                  description: Unique identifier for this webhook delivery
                  example: "Webhook:019542f5-b3e7-1d02-0000-000000000008"
                type:
                  $ref: '#/components/schemas/WebhookType'
                  description: Type of webhook event
                  example: "BULK_UPLOAD"
                progress:
                  type: object
                  required:
                    - total
                    - processed
                    - successful
                    - failed
                  properties:
                    total:
                      type: integer
                      description: Total number of users to process
                      example: 5000
                    processed:
                      type: integer
                      description: Number of users processed
                      example: 5000
                    successful:
                      type: integer
                      description: Number of users successfully created
                      example: 4950
                    failed:
                      type: integer
                      description: Number of users that failed to create
                      example: 50
                errors:
                  type: array
                  description: Detailed error information for failed entries
                  items:
                    type: object
                    required:
                      - correlationId
                      - error
                    properties:
                      correlationId:
                        type: string
                        description: Platform user ID or row number for the failed entry
                        example: "biz456"
                      error:
                        $ref: '#/components/schemas/Error'
            examples:
              completedUpload:
                summary: Successful bulk upload completion
                value:
                  jobId: "job_123456789"
                  status: "SUCCESS"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000008"
                  type: "BULK_UPLOAD"
                  progress:
                    total: 5000
                    processed: 5000
                    successful: 5000
                    failed: 0
                  errors: []
                      
              failedUpload:
                summary: Failed bulk upload
                value:
                  jobId: "job_123456789"
                  status: "FAILED"
                  timestamp: "2023-08-15T14:32:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000008"
                  type: "BULK_UPLOAD"
                  progress:
                    total: 5000
                    processed: 5000
                    successful: 0
                    failed: 5000
                  errors:
                    - correlationId: "row_1"
                      error:
                        code: "invalid_csv_format"
                        message: "Invalid CSV format"
                        details:
                          reason: "missing_required_column"
                          column: "umaAddress"
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Webhook has already been processed (duplicate webhookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  invitation-claimed:
    post:
      summary: Invitation claimed webhook
      description: |
        Webhook that is called when an invitation is claimed by a user.
        This endpoint should be implemented by platform clients of the UMAaaS API.
        
        When a user claims an invitation, this webhook is triggered to notify the platform that:
        1. The invitation has been successfully claimed
        2. The invitee UMA address is now associated with the invitation
        3. The invitation status has changed from PENDING to CLAIMED
        
        This allows platforms to:
        - Track invitation usage and conversion rates
        - Trigger onboarding flows for new users who joined via invitation
        - Apply referral bonuses or rewards to the inviter
        - Update their UI to reflect the claimed status
        
        ### Authentication
        The webhook includes a signature in the `X-UMAaas-Signature` header that allows you to verify that the webhook was sent by UMAaas.
        To verify the signature:
        1. Get the webhook secret provided to you during integration
        2. Create an HMAC-SHA256 hash of the entire request body (as a raw string) using the webhook secret as the key
        3. Encode the hash in hexadecimal format
        4. Compare this value to the signature in the `X-UMAaas-Signature` header
        
        If the values match, the webhook is authentic. If not, it should be rejected.
      operationId: invitationClaimedWebhook
      tags:
        - Webhooks
      security:
        - WebhookSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - invitation
                - timestamp
                - webhookId
                - type
              properties:
                invitation:
                  $ref: '#/components/schemas/UmaInvitation'
                timestamp:
                  type: string
                  format: date-time
                  description: ISO8601 timestamp when the webhook was sent (can be used to prevent replay attacks)
                  example: "2023-08-15T14:32:00Z"
                webhookId:
                  type: string
                  description: Unique identifier for this webhook delivery (can be used for idempotency)
                  example: "Webhook:019542f5-b3e7-1d02-0000-000000000008"
                type:
                  type: string
                  enum: [INVITATION_CLAIMED]
                  description: Type of webhook event
                  example: "INVITATION_CLAIMED"
            examples:
              claimedInvitation:
                summary: Invitation claimed notification
                value:
                  invitation:
                    code: "019542f5"
                    createdAt: "2023-09-01T14:30:00Z"
                    claimedAt: "2023-09-01T15:45:00Z"
                    inviterUma: "$inviter@uma.domain"
                    inviteeUma: "$invitee@uma.domain"
                    status: "CLAIMED"
                    url: "https://uma.me/i/019542f5"
                  timestamp: "2023-09-01T15:45:00Z"
                  webhookId: "Webhook:019542f5-b3e7-1d02-0000-000000000008"
                  type: "INVITATION_CLAIMED"
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Webhook has already been processed (duplicate webhookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BasicAuth: [] 