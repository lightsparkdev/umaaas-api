# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from umaaas_api.models.currency import Currency
from umaaas_api.models.payment_instructions import PaymentInstructions
from typing import Optional, Set
from typing_extensions import Self

class Quote(BaseModel):
    """
    Quote
    """ # noqa: E501
    quote_id: StrictStr = Field(description="Unique identifier for this quote", alias="quoteId")
    sending_currency: Currency = Field(alias="sendingCurrency")
    receiving_currency: Currency = Field(alias="receivingCurrency")
    total_sending_amount: StrictInt = Field(description="The total amount that will be sent in the smallest unit of the sending currency (eg. cents).", alias="totalSendingAmount")
    total_receiving_amount: StrictInt = Field(description="The total amount that will be received in the smallest unit of the receiving currency (eg. cents).", alias="totalReceivingAmount")
    exchange_rate: Union[StrictFloat, StrictInt] = Field(description="Number of sending currency units per receiving currency unit.", alias="exchangeRate")
    expires_at: datetime = Field(description="When this quote expires (typically 1-5 minutes after creation)", alias="expiresAt")
    fees_included: Annotated[int, Field(strict=True, ge=0)] = Field(description="The fees associated with the quote in the smallest unit of the sending currency (eg. cents).", alias="feesIncluded")
    counterparty_information: Optional[Dict[str, Any]] = Field(default=None, description="Information about the recipient, as required by the platform in their configuration.", alias="counterpartyInformation")
    payment_instructions: PaymentInstructions = Field(alias="paymentInstructions")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the quote")
    transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the transaction created from this quote. Only present if the quote has started processing.", alias="transactionId")
    __properties: ClassVar[List[str]] = ["quoteId", "sendingCurrency", "receivingCurrency", "totalSendingAmount", "totalReceivingAmount", "exchangeRate", "expiresAt", "feesIncluded", "counterpartyInformation", "paymentInstructions", "status", "transactionId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'EXPIRED']):
            raise ValueError("must be one of enum values ('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sending_currency
        if self.sending_currency:
            _dict['sendingCurrency'] = self.sending_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiving_currency
        if self.receiving_currency:
            _dict['receivingCurrency'] = self.receiving_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_instructions
        if self.payment_instructions:
            _dict['paymentInstructions'] = self.payment_instructions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteId": obj.get("quoteId"),
            "sendingCurrency": Currency.from_dict(obj["sendingCurrency"]) if obj.get("sendingCurrency") is not None else None,
            "receivingCurrency": Currency.from_dict(obj["receivingCurrency"]) if obj.get("receivingCurrency") is not None else None,
            "totalSendingAmount": obj.get("totalSendingAmount"),
            "totalReceivingAmount": obj.get("totalReceivingAmount"),
            "exchangeRate": obj.get("exchangeRate"),
            "expiresAt": obj.get("expiresAt"),
            "feesIncluded": obj.get("feesIncluded"),
            "counterpartyInformation": obj.get("counterpartyInformation"),
            "paymentInstructions": PaymentInstructions.from_dict(obj["paymentInstructions"]) if obj.get("paymentInstructions") is not None else None,
            "status": obj.get("status"),
            "transactionId": obj.get("transactionId")
        })
        return _obj


