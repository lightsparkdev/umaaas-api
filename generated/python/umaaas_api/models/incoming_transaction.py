# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from umaaas_api.models.currency_amount import CurrencyAmount
from umaaas_api.models.transaction_status import TransactionStatus
from umaaas_api.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

class IncomingTransaction(BaseModel):
    """
    IncomingTransaction
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the transaction")
    status: TransactionStatus
    type: TransactionType = Field(description="Always \"INCOMING\" for incoming transactions")
    sender_uma_address: StrictStr = Field(description="UMA address of the payment sender", alias="senderUmaAddress")
    receiver_uma_address: StrictStr = Field(description="UMA address of the payment recipient", alias="receiverUmaAddress")
    user_id: StrictStr = Field(description="System ID of the user (sender for outgoing, recipient for incoming)", alias="userId")
    platform_user_id: StrictStr = Field(description="Platform-specific ID of the user (sender for outgoing, recipient for incoming)", alias="platformUserId")
    settled_at: Optional[datetime] = Field(default=None, description="When the payment was or will be settled", alias="settledAt")
    created_at: Optional[datetime] = Field(default=None, description="When the transaction was created", alias="createdAt")
    description: Optional[StrictStr] = Field(default=None, description="Optional memo or description for the payment")
    counterparty_information: Optional[Dict[str, Any]] = Field(default=None, description="Additional information about the counterparty, if available", alias="counterpartyInformation")
    received_amount: CurrencyAmount = Field(description="Amount received in the recipient's currency", alias="receivedAmount")
    __properties: ClassVar[List[str]] = ["id", "status", "type", "senderUmaAddress", "receiverUmaAddress", "userId", "platformUserId", "settledAt", "createdAt", "description", "counterpartyInformation", "receivedAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of received_amount
        if self.received_amount:
            _dict['receivedAmount'] = self.received_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "senderUmaAddress": obj.get("senderUmaAddress"),
            "receiverUmaAddress": obj.get("receiverUmaAddress"),
            "userId": obj.get("userId"),
            "platformUserId": obj.get("platformUserId"),
            "settledAt": obj.get("settledAt"),
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "counterpartyInformation": obj.get("counterpartyInformation"),
            "receivedAmount": CurrencyAmount.from_dict(obj["receivedAmount"]) if obj.get("receivedAmount") is not None else None
        })
        return _obj


