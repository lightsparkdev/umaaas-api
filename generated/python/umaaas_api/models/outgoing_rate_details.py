# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 2025-05-15
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OutgoingRateDetails(BaseModel):
    """
    Details about the rate and fees for an outgoing transaction or quote.
    """ # noqa: E501
    counterparty_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The underlying multiplier from mSATs to the receiving currency as returned by the counterparty institution.", alias="counterpartyMultiplier")
    counterparty_fixed_fee: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The fixed fee charged by the counterparty institution to execute the quote in the smallest unit of the receiving currency (eg. cents).", alias="counterpartyFixedFee")
    umaaas_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The underlying multiplier from the sending currency to mSATS, including variable fees.", alias="umaaasMultiplier")
    umaaas_fixed_fee: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The fixed fee charged by the UMAaaS product to execute the quote in the smallest unit of the sending currency (eg. cents).", alias="umaaasFixedFee")
    umaaas_variable_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The variable fee rate charged by the UMAaaS product to execute the quote as a percentage of the sending currency amount.", alias="umaaasVariableFeeRate")
    umaaas_variable_fee_amount: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The variable fee amount charged by the UMAaaS product to execute the quote in the smallest unit of the sending currency (eg. cents). This is the sending amount times umaaasVariableFeeRate.", alias="umaaasVariableFeeAmount")
    __properties: ClassVar[List[str]] = ["counterpartyMultiplier", "counterpartyFixedFee", "umaaasMultiplier", "umaaasFixedFee", "umaaasVariableFeeRate", "umaaasVariableFeeAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutgoingRateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutgoingRateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counterpartyMultiplier": obj.get("counterpartyMultiplier"),
            "counterpartyFixedFee": obj.get("counterpartyFixedFee"),
            "umaaasMultiplier": obj.get("umaaasMultiplier"),
            "umaaasFixedFee": obj.get("umaaasFixedFee"),
            "umaaasVariableFeeRate": obj.get("umaaasVariableFeeRate"),
            "umaaasVariableFeeAmount": obj.get("umaaasVariableFeeAmount")
        })
        return _obj


