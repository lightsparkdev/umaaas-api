# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Union
from umaaas_api.models.bank_account_type import BankAccountType
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from umaaas_api.models.payment_clabe_account_info import PaymentClabeAccountInfo
    from umaaas_api.models.payment_fbo_account_info import PaymentFboAccountInfo
    from umaaas_api.models.payment_iban_account_info import PaymentIbanAccountInfo
    from umaaas_api.models.payment_pix_account_info import PaymentPixAccountInfo
    from umaaas_api.models.payment_us_account_info import PaymentUsAccountInfo

class PaymentBankAccountInfo(BaseModel):
    """
    PaymentBankAccountInfo
    """ # noqa: E501
    account_type: BankAccountType = Field(alias="accountType")
    __properties: ClassVar[List[str]] = ["accountType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'accountType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'CLABE': 'PaymentClabeAccountInfo','FBO': 'PaymentFboAccountInfo','IBAN': 'PaymentIbanAccountInfo','PIX': 'PaymentPixAccountInfo','US_ACCOUNT': 'PaymentUsAccountInfo'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[PaymentClabeAccountInfo, PaymentFboAccountInfo, PaymentIbanAccountInfo, PaymentPixAccountInfo, PaymentUsAccountInfo]]:
        """Create an instance of PaymentBankAccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[PaymentClabeAccountInfo, PaymentFboAccountInfo, PaymentIbanAccountInfo, PaymentPixAccountInfo, PaymentUsAccountInfo]]:
        """Create an instance of PaymentBankAccountInfo from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'PaymentClabeAccountInfo':
            return import_module("umaaas_api.models.payment_clabe_account_info").PaymentClabeAccountInfo.from_dict(obj)
        if object_type ==  'PaymentFboAccountInfo':
            return import_module("umaaas_api.models.payment_fbo_account_info").PaymentFboAccountInfo.from_dict(obj)
        if object_type ==  'PaymentIbanAccountInfo':
            return import_module("umaaas_api.models.payment_iban_account_info").PaymentIbanAccountInfo.from_dict(obj)
        if object_type ==  'PaymentPixAccountInfo':
            return import_module("umaaas_api.models.payment_pix_account_info").PaymentPixAccountInfo.from_dict(obj)
        if object_type ==  'PaymentUsAccountInfo':
            return import_module("umaaas_api.models.payment_us_account_info").PaymentUsAccountInfo.from_dict(obj)

        raise ValueError("PaymentBankAccountInfo failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


