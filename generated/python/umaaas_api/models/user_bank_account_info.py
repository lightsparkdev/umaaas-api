# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from umaaas_api.models.bank_account_type import BankAccountType
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from umaaas_api.models.user_clabe_account_info import UserClabeAccountInfo
    from umaaas_api.models.user_fbo_account_info import UserFboAccountInfo
    from umaaas_api.models.user_iban_account_info import UserIbanAccountInfo
    from umaaas_api.models.user_pix_account_info import UserPixAccountInfo
    from umaaas_api.models.user_us_account_info import UserUsAccountInfo

class UserBankAccountInfo(BaseModel):
    """
    UserBankAccountInfo
    """ # noqa: E501
    account_type: BankAccountType = Field(alias="accountType")
    platform_account_id: Optional[StrictStr] = Field(default=None, description="Platform-specific identifier for this bank account. This optional field allows platforms to link bank accounts to their internal account systems. The value can be any string that helps identify the account in your system (e.g. database IDs, custom references, etc.).  This field is particularly useful when: - Tracking multiple bank accounts for the same user - Linking accounts to internal accounting systems - Maintaining consistency between UMAaaS and your platform's account records ", alias="platformAccountId")
    __properties: ClassVar[List[str]] = ["accountType", "platformAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'accountType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'CLABE': 'UserClabeAccountInfo','FBO': 'UserFboAccountInfo','IBAN': 'UserIbanAccountInfo','PIX': 'UserPixAccountInfo','US_ACCOUNT': 'UserUsAccountInfo'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[UserClabeAccountInfo, UserFboAccountInfo, UserIbanAccountInfo, UserPixAccountInfo, UserUsAccountInfo]]:
        """Create an instance of UserBankAccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[UserClabeAccountInfo, UserFboAccountInfo, UserIbanAccountInfo, UserPixAccountInfo, UserUsAccountInfo]]:
        """Create an instance of UserBankAccountInfo from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'UserClabeAccountInfo':
            return import_module("umaaas_api.models.user_clabe_account_info").UserClabeAccountInfo.from_dict(obj)
        if object_type ==  'UserFboAccountInfo':
            return import_module("umaaas_api.models.user_fbo_account_info").UserFboAccountInfo.from_dict(obj)
        if object_type ==  'UserIbanAccountInfo':
            return import_module("umaaas_api.models.user_iban_account_info").UserIbanAccountInfo.from_dict(obj)
        if object_type ==  'UserPixAccountInfo':
            return import_module("umaaas_api.models.user_pix_account_info").UserPixAccountInfo.from_dict(obj)
        if object_type ==  'UserUsAccountInfo':
            return import_module("umaaas_api.models.user_us_account_info").UserUsAccountInfo.from_dict(obj)

        raise ValueError("UserBankAccountInfo failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


