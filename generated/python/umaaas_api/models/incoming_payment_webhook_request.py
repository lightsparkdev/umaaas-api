# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 2025-05-15
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from umaaas_api.models.counterparty_field_definition import CounterpartyFieldDefinition
from umaaas_api.models.incoming_transaction import IncomingTransaction
from umaaas_api.models.webhook_type import WebhookType
from typing import Optional, Set
from typing_extensions import Self

class IncomingPaymentWebhookRequest(BaseModel):
    """
    IncomingPaymentWebhookRequest
    """ # noqa: E501
    transaction: IncomingTransaction
    timestamp: datetime = Field(description="ISO8601 timestamp when the webhook was sent (can be used to prevent replay attacks)")
    webhook_id: StrictStr = Field(description="Unique identifier for this webhook delivery (can be used for idempotency)", alias="webhookId")
    type: WebhookType = Field(description="Type of webhook event")
    requested_receiver_user_info_fields: Optional[List[CounterpartyFieldDefinition]] = Field(default=None, description="Information required by the sender's VASP about the recipient. Platform must provide these in the 200 OK response if approving. Note that this only includes fields which UMAaaS does not already have from initial user registration.", alias="requestedReceiverUserInfoFields")
    __properties: ClassVar[List[str]] = ["transaction", "timestamp", "webhookId", "type", "requestedReceiverUserInfoFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingPaymentWebhookRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in requested_receiver_user_info_fields (list)
        _items = []
        if self.requested_receiver_user_info_fields:
            for _item_requested_receiver_user_info_fields in self.requested_receiver_user_info_fields:
                if _item_requested_receiver_user_info_fields:
                    _items.append(_item_requested_receiver_user_info_fields.to_dict())
            _dict['requestedReceiverUserInfoFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingPaymentWebhookRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transaction": IncomingTransaction.from_dict(obj["transaction"]) if obj.get("transaction") is not None else None,
            "timestamp": obj.get("timestamp"),
            "webhookId": obj.get("webhookId"),
            "type": obj.get("type"),
            "requestedReceiverUserInfoFields": [CounterpartyFieldDefinition.from_dict(_item) for _item in obj["requestedReceiverUserInfoFields"]] if obj.get("requestedReceiverUserInfoFields") is not None else None
        })
        return _obj


