# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from umaaas_api.models.counterparty_field_definition import CounterpartyFieldDefinition
from umaaas_api.models.currency_preference import CurrencyPreference
from typing import Optional, Set
from typing_extensions import Self

class LookupUma200Response(BaseModel):
    """
    LookupUma200Response
    """ # noqa: E501
    receiving_uma_address: StrictStr = Field(description="The UMA address that was looked up", alias="receivingUmaAddress")
    supported_currencies: List[CurrencyPreference] = Field(description="List of currencies supported by the receiving UMA address", alias="supportedCurrencies")
    required_payer_data_fields: Optional[List[CounterpartyFieldDefinition]] = Field(default=None, description="Fields required by the receiving institution about the payer before payment can be completed", alias="requiredPayerDataFields")
    __properties: ClassVar[List[str]] = ["receivingUmaAddress", "supportedCurrencies", "requiredPayerDataFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LookupUma200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in supported_currencies (list)
        _items = []
        if self.supported_currencies:
            for _item_supported_currencies in self.supported_currencies:
                if _item_supported_currencies:
                    _items.append(_item_supported_currencies.to_dict())
            _dict['supportedCurrencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in required_payer_data_fields (list)
        _items = []
        if self.required_payer_data_fields:
            for _item_required_payer_data_fields in self.required_payer_data_fields:
                if _item_required_payer_data_fields:
                    _items.append(_item_required_payer_data_fields.to_dict())
            _dict['requiredPayerDataFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LookupUma200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "receivingUmaAddress": obj.get("receivingUmaAddress"),
            "supportedCurrencies": [CurrencyPreference.from_dict(_item) for _item in obj["supportedCurrencies"]] if obj.get("supportedCurrencies") is not None else None,
            "requiredPayerDataFields": [CounterpartyFieldDefinition.from_dict(_item) for _item in obj["requiredPayerDataFields"]] if obj.get("requiredPayerDataFields") is not None else None
        })
        return _obj


