# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 2025-05-15
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from umaaas_api.models.transaction_status import TransactionStatus
from umaaas_api.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from umaaas_api.models.incoming_transaction import IncomingTransaction
    from umaaas_api.models.outgoing_transaction import OutgoingTransaction

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the transaction")
    status: TransactionStatus
    type: TransactionType
    sender_uma_address: StrictStr = Field(description="UMA address of the payment sender", alias="senderUmaAddress")
    receiver_uma_address: StrictStr = Field(description="UMA address of the payment recipient", alias="receiverUmaAddress")
    user_id: StrictStr = Field(description="System ID of the user (sender for outgoing, recipient for incoming)", alias="userId")
    platform_user_id: StrictStr = Field(description="Platform-specific ID of the user (sender for outgoing, recipient for incoming)", alias="platformUserId")
    settled_at: Optional[datetime] = Field(default=None, description="When the payment was or will be settled", alias="settledAt")
    created_at: Optional[datetime] = Field(default=None, description="When the transaction was created", alias="createdAt")
    description: Optional[StrictStr] = Field(default=None, description="Optional memo or description for the payment")
    counterparty_information: Optional[Dict[str, Any]] = Field(default=None, description="Additional information about the counterparty, if available", alias="counterpartyInformation")
    __properties: ClassVar[List[str]] = ["id", "status", "type", "senderUmaAddress", "receiverUmaAddress", "userId", "platformUserId", "settledAt", "createdAt", "description", "counterpartyInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'INCOMING': 'IncomingTransaction','OUTGOING': 'OutgoingTransaction'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[IncomingTransaction, OutgoingTransaction]]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[IncomingTransaction, OutgoingTransaction]]:
        """Create an instance of Transaction from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'IncomingTransaction':
            return import_module("umaaas_api.models.incoming_transaction").IncomingTransaction.from_dict(obj)
        if object_type ==  'OutgoingTransaction':
            return import_module("umaaas_api.models.outgoing_transaction").OutgoingTransaction.from_dict(obj)

        raise ValueError("Transaction failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


