# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 2025-05-15
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from umaaas_api.models.get_available_uma_providers200_response import GetAvailableUmaProviders200Response

from umaaas_api.api_client import ApiClient, RequestSerialized
from umaaas_api.api_response import ApiResponse
from umaaas_api.rest import RESTResponseType


class AvailableUMAProvidersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_available_uma_providers(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The alpha-2 representation of a country, as defined by the ISO 3166-1 standard.")] = None,
        currency_code: Annotated[Optional[StrictStr], Field(description="The ISO 4217 currency code to filter providers by supported currency.")] = None,
        has_blocked_providers: Annotated[Optional[StrictBool], Field(description="Whether to include providers which are not on your allowlist in the response. By default the response will include blocked providers.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of results to return (default 20, max 100)")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor for pagination (returned from previous request)")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Order to sort results in")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAvailableUmaProviders200Response:
        """This endpoint provides a list of counterparties that are available.

        This endpoint provides a list of counterparties that are available.  The response includes basic information about each provider, such as its UMA address, name, and supported currencies. This can be used to determine which providers are available for sending or receiving payments. 

        :param country_code: The alpha-2 representation of a country, as defined by the ISO 3166-1 standard.
        :type country_code: str
        :param currency_code: The ISO 4217 currency code to filter providers by supported currency.
        :type currency_code: str
        :param has_blocked_providers: Whether to include providers which are not on your allowlist in the response. By default the response will include blocked providers.
        :type has_blocked_providers: bool
        :param limit: Maximum number of results to return (default 20, max 100)
        :type limit: int
        :param cursor: Cursor for pagination (returned from previous request)
        :type cursor: str
        :param sort_order: Order to sort results in
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_uma_providers_serialize(
            country_code=country_code,
            currency_code=currency_code,
            has_blocked_providers=has_blocked_providers,
            limit=limit,
            cursor=cursor,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAvailableUmaProviders200Response",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_available_uma_providers_with_http_info(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The alpha-2 representation of a country, as defined by the ISO 3166-1 standard.")] = None,
        currency_code: Annotated[Optional[StrictStr], Field(description="The ISO 4217 currency code to filter providers by supported currency.")] = None,
        has_blocked_providers: Annotated[Optional[StrictBool], Field(description="Whether to include providers which are not on your allowlist in the response. By default the response will include blocked providers.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of results to return (default 20, max 100)")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor for pagination (returned from previous request)")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Order to sort results in")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAvailableUmaProviders200Response]:
        """This endpoint provides a list of counterparties that are available.

        This endpoint provides a list of counterparties that are available.  The response includes basic information about each provider, such as its UMA address, name, and supported currencies. This can be used to determine which providers are available for sending or receiving payments. 

        :param country_code: The alpha-2 representation of a country, as defined by the ISO 3166-1 standard.
        :type country_code: str
        :param currency_code: The ISO 4217 currency code to filter providers by supported currency.
        :type currency_code: str
        :param has_blocked_providers: Whether to include providers which are not on your allowlist in the response. By default the response will include blocked providers.
        :type has_blocked_providers: bool
        :param limit: Maximum number of results to return (default 20, max 100)
        :type limit: int
        :param cursor: Cursor for pagination (returned from previous request)
        :type cursor: str
        :param sort_order: Order to sort results in
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_uma_providers_serialize(
            country_code=country_code,
            currency_code=currency_code,
            has_blocked_providers=has_blocked_providers,
            limit=limit,
            cursor=cursor,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAvailableUmaProviders200Response",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_available_uma_providers_without_preload_content(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The alpha-2 representation of a country, as defined by the ISO 3166-1 standard.")] = None,
        currency_code: Annotated[Optional[StrictStr], Field(description="The ISO 4217 currency code to filter providers by supported currency.")] = None,
        has_blocked_providers: Annotated[Optional[StrictBool], Field(description="Whether to include providers which are not on your allowlist in the response. By default the response will include blocked providers.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of results to return (default 20, max 100)")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor for pagination (returned from previous request)")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Order to sort results in")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """This endpoint provides a list of counterparties that are available.

        This endpoint provides a list of counterparties that are available.  The response includes basic information about each provider, such as its UMA address, name, and supported currencies. This can be used to determine which providers are available for sending or receiving payments. 

        :param country_code: The alpha-2 representation of a country, as defined by the ISO 3166-1 standard.
        :type country_code: str
        :param currency_code: The ISO 4217 currency code to filter providers by supported currency.
        :type currency_code: str
        :param has_blocked_providers: Whether to include providers which are not on your allowlist in the response. By default the response will include blocked providers.
        :type has_blocked_providers: bool
        :param limit: Maximum number of results to return (default 20, max 100)
        :type limit: int
        :param cursor: Cursor for pagination (returned from previous request)
        :type cursor: str
        :param sort_order: Order to sort results in
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_uma_providers_serialize(
            country_code=country_code,
            currency_code=currency_code,
            has_blocked_providers=has_blocked_providers,
            limit=limit,
            cursor=cursor,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAvailableUmaProviders200Response",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_available_uma_providers_serialize(
        self,
        country_code,
        currency_code,
        has_blocked_providers,
        limit,
        cursor,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if currency_code is not None:
            
            _query_params.append(('currencyCode', currency_code))
            
        if has_blocked_providers is not None:
            
            _query_params.append(('hasBlockedProviders', has_blocked_providers))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/uma-providers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


