# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from umaaas_api.models.approve_pending_payment_request import ApprovePendingPaymentRequest
from umaaas_api.models.get_transaction_by_id200_response import GetTransactionById200Response
from umaaas_api.models.incoming_transaction import IncomingTransaction
from umaaas_api.models.list_transactions200_response import ListTransactions200Response
from umaaas_api.models.reject_pending_payment_request import RejectPendingPaymentRequest
from umaaas_api.models.transaction_status import TransactionStatus
from umaaas_api.models.transaction_type import TransactionType

from umaaas_api.api_client import ApiClient, RequestSerialized
from umaaas_api.api_response import ApiResponse
from umaaas_api.rest import RESTResponseType


class TransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def approve_pending_payment(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction to approve")],
        approve_pending_payment_request: Optional[ApprovePendingPaymentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IncomingTransaction:
        """Approve a pending incoming payment

        Approve a pending incoming payment that was previously acknowledged with a 202 response. This endpoint allows platforms to asynchronously approve payments after async processing. 

        :param transaction_id: Unique identifier of the transaction to approve (required)
        :type transaction_id: str
        :param approve_pending_payment_request:
        :type approve_pending_payment_request: ApprovePendingPaymentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._approve_pending_payment_serialize(
            transaction_id=transaction_id,
            approve_pending_payment_request=approve_pending_payment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IncomingTransaction",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '409': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def approve_pending_payment_with_http_info(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction to approve")],
        approve_pending_payment_request: Optional[ApprovePendingPaymentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IncomingTransaction]:
        """Approve a pending incoming payment

        Approve a pending incoming payment that was previously acknowledged with a 202 response. This endpoint allows platforms to asynchronously approve payments after async processing. 

        :param transaction_id: Unique identifier of the transaction to approve (required)
        :type transaction_id: str
        :param approve_pending_payment_request:
        :type approve_pending_payment_request: ApprovePendingPaymentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._approve_pending_payment_serialize(
            transaction_id=transaction_id,
            approve_pending_payment_request=approve_pending_payment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IncomingTransaction",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '409': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def approve_pending_payment_without_preload_content(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction to approve")],
        approve_pending_payment_request: Optional[ApprovePendingPaymentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Approve a pending incoming payment

        Approve a pending incoming payment that was previously acknowledged with a 202 response. This endpoint allows platforms to asynchronously approve payments after async processing. 

        :param transaction_id: Unique identifier of the transaction to approve (required)
        :type transaction_id: str
        :param approve_pending_payment_request:
        :type approve_pending_payment_request: ApprovePendingPaymentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._approve_pending_payment_serialize(
            transaction_id=transaction_id,
            approve_pending_payment_request=approve_pending_payment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IncomingTransaction",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '409': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _approve_pending_payment_serialize(
        self,
        transaction_id,
        approve_pending_payment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if transaction_id is not None:
            _path_params['transactionId'] = transaction_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if approve_pending_payment_request is not None:
            _body_params = approve_pending_payment_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/transactions/{transactionId}/approve',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_transaction_by_id(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTransactionById200Response:
        """Get transaction by ID

        Retrieve detailed information about a specific transaction

        :param transaction_id: Unique identifier of the transaction (required)
        :type transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_by_id_serialize(
            transaction_id=transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactionById200Response",
            '401': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_transaction_by_id_with_http_info(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTransactionById200Response]:
        """Get transaction by ID

        Retrieve detailed information about a specific transaction

        :param transaction_id: Unique identifier of the transaction (required)
        :type transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_by_id_serialize(
            transaction_id=transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactionById200Response",
            '401': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_transaction_by_id_without_preload_content(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get transaction by ID

        Retrieve detailed information about a specific transaction

        :param transaction_id: Unique identifier of the transaction (required)
        :type transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transaction_by_id_serialize(
            transaction_id=transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTransactionById200Response",
            '401': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_transaction_by_id_serialize(
        self,
        transaction_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if transaction_id is not None:
            _path_params['transactionId'] = transaction_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions/{transactionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_transactions(
        self,
        user_id: Annotated[Optional[StrictStr], Field(description="Filter by system user ID")] = None,
        platform_user_id: Annotated[Optional[StrictStr], Field(description="Filter by platform-specific user ID")] = None,
        uma_address: Annotated[Optional[StrictStr], Field(description="Filter by UMA address (either sender or receiver)")] = None,
        sender_uma_address: Annotated[Optional[StrictStr], Field(description="Filter by sender UMA address")] = None,
        receiver_uma_address: Annotated[Optional[StrictStr], Field(description="Filter by receiver UMA address")] = None,
        status: Annotated[Optional[TransactionStatus], Field(description="Filter by transaction status")] = None,
        type: Annotated[Optional[TransactionType], Field(description="Filter by transaction type")] = None,
        reference: Annotated[Optional[StrictStr], Field(description="Filter by reference")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Filter by start date (inclusive) in ISO 8601 format")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Filter by end date (inclusive) in ISO 8601 format")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of results to return (default 20, max 100)")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor for pagination (returned from previous request)")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Order to sort results in")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTransactions200Response:
        """List transactions

        Retrieve a paginated list of transactions with optional filtering. The transactions can be filtered by user ID, platform user ID, UMA address,  date range, status, and transaction type. 

        :param user_id: Filter by system user ID
        :type user_id: str
        :param platform_user_id: Filter by platform-specific user ID
        :type platform_user_id: str
        :param uma_address: Filter by UMA address (either sender or receiver)
        :type uma_address: str
        :param sender_uma_address: Filter by sender UMA address
        :type sender_uma_address: str
        :param receiver_uma_address: Filter by receiver UMA address
        :type receiver_uma_address: str
        :param status: Filter by transaction status
        :type status: TransactionStatus
        :param type: Filter by transaction type
        :type type: TransactionType
        :param reference: Filter by reference
        :type reference: str
        :param start_date: Filter by start date (inclusive) in ISO 8601 format
        :type start_date: datetime
        :param end_date: Filter by end date (inclusive) in ISO 8601 format
        :type end_date: datetime
        :param limit: Maximum number of results to return (default 20, max 100)
        :type limit: int
        :param cursor: Cursor for pagination (returned from previous request)
        :type cursor: str
        :param sort_order: Order to sort results in
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_transactions_serialize(
            user_id=user_id,
            platform_user_id=platform_user_id,
            uma_address=uma_address,
            sender_uma_address=sender_uma_address,
            receiver_uma_address=receiver_uma_address,
            status=status,
            type=type,
            reference=reference,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            cursor=cursor,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactions200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_transactions_with_http_info(
        self,
        user_id: Annotated[Optional[StrictStr], Field(description="Filter by system user ID")] = None,
        platform_user_id: Annotated[Optional[StrictStr], Field(description="Filter by platform-specific user ID")] = None,
        uma_address: Annotated[Optional[StrictStr], Field(description="Filter by UMA address (either sender or receiver)")] = None,
        sender_uma_address: Annotated[Optional[StrictStr], Field(description="Filter by sender UMA address")] = None,
        receiver_uma_address: Annotated[Optional[StrictStr], Field(description="Filter by receiver UMA address")] = None,
        status: Annotated[Optional[TransactionStatus], Field(description="Filter by transaction status")] = None,
        type: Annotated[Optional[TransactionType], Field(description="Filter by transaction type")] = None,
        reference: Annotated[Optional[StrictStr], Field(description="Filter by reference")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Filter by start date (inclusive) in ISO 8601 format")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Filter by end date (inclusive) in ISO 8601 format")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of results to return (default 20, max 100)")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor for pagination (returned from previous request)")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Order to sort results in")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTransactions200Response]:
        """List transactions

        Retrieve a paginated list of transactions with optional filtering. The transactions can be filtered by user ID, platform user ID, UMA address,  date range, status, and transaction type. 

        :param user_id: Filter by system user ID
        :type user_id: str
        :param platform_user_id: Filter by platform-specific user ID
        :type platform_user_id: str
        :param uma_address: Filter by UMA address (either sender or receiver)
        :type uma_address: str
        :param sender_uma_address: Filter by sender UMA address
        :type sender_uma_address: str
        :param receiver_uma_address: Filter by receiver UMA address
        :type receiver_uma_address: str
        :param status: Filter by transaction status
        :type status: TransactionStatus
        :param type: Filter by transaction type
        :type type: TransactionType
        :param reference: Filter by reference
        :type reference: str
        :param start_date: Filter by start date (inclusive) in ISO 8601 format
        :type start_date: datetime
        :param end_date: Filter by end date (inclusive) in ISO 8601 format
        :type end_date: datetime
        :param limit: Maximum number of results to return (default 20, max 100)
        :type limit: int
        :param cursor: Cursor for pagination (returned from previous request)
        :type cursor: str
        :param sort_order: Order to sort results in
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_transactions_serialize(
            user_id=user_id,
            platform_user_id=platform_user_id,
            uma_address=uma_address,
            sender_uma_address=sender_uma_address,
            receiver_uma_address=receiver_uma_address,
            status=status,
            type=type,
            reference=reference,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            cursor=cursor,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactions200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_transactions_without_preload_content(
        self,
        user_id: Annotated[Optional[StrictStr], Field(description="Filter by system user ID")] = None,
        platform_user_id: Annotated[Optional[StrictStr], Field(description="Filter by platform-specific user ID")] = None,
        uma_address: Annotated[Optional[StrictStr], Field(description="Filter by UMA address (either sender or receiver)")] = None,
        sender_uma_address: Annotated[Optional[StrictStr], Field(description="Filter by sender UMA address")] = None,
        receiver_uma_address: Annotated[Optional[StrictStr], Field(description="Filter by receiver UMA address")] = None,
        status: Annotated[Optional[TransactionStatus], Field(description="Filter by transaction status")] = None,
        type: Annotated[Optional[TransactionType], Field(description="Filter by transaction type")] = None,
        reference: Annotated[Optional[StrictStr], Field(description="Filter by reference")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Filter by start date (inclusive) in ISO 8601 format")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Filter by end date (inclusive) in ISO 8601 format")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of results to return (default 20, max 100)")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor for pagination (returned from previous request)")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Order to sort results in")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List transactions

        Retrieve a paginated list of transactions with optional filtering. The transactions can be filtered by user ID, platform user ID, UMA address,  date range, status, and transaction type. 

        :param user_id: Filter by system user ID
        :type user_id: str
        :param platform_user_id: Filter by platform-specific user ID
        :type platform_user_id: str
        :param uma_address: Filter by UMA address (either sender or receiver)
        :type uma_address: str
        :param sender_uma_address: Filter by sender UMA address
        :type sender_uma_address: str
        :param receiver_uma_address: Filter by receiver UMA address
        :type receiver_uma_address: str
        :param status: Filter by transaction status
        :type status: TransactionStatus
        :param type: Filter by transaction type
        :type type: TransactionType
        :param reference: Filter by reference
        :type reference: str
        :param start_date: Filter by start date (inclusive) in ISO 8601 format
        :type start_date: datetime
        :param end_date: Filter by end date (inclusive) in ISO 8601 format
        :type end_date: datetime
        :param limit: Maximum number of results to return (default 20, max 100)
        :type limit: int
        :param cursor: Cursor for pagination (returned from previous request)
        :type cursor: str
        :param sort_order: Order to sort results in
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_transactions_serialize(
            user_id=user_id,
            platform_user_id=platform_user_id,
            uma_address=uma_address,
            sender_uma_address=sender_uma_address,
            receiver_uma_address=receiver_uma_address,
            status=status,
            type=type,
            reference=reference,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            cursor=cursor,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactions200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_transactions_serialize(
        self,
        user_id,
        platform_user_id,
        uma_address,
        sender_uma_address,
        receiver_uma_address,
        status,
        type,
        reference,
        start_date,
        end_date,
        limit,
        cursor,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_id is not None:
            
            _query_params.append(('userId', user_id))
            
        if platform_user_id is not None:
            
            _query_params.append(('platformUserId', platform_user_id))
            
        if uma_address is not None:
            
            _query_params.append(('umaAddress', uma_address))
            
        if sender_uma_address is not None:
            
            _query_params.append(('senderUmaAddress', sender_uma_address))
            
        if receiver_uma_address is not None:
            
            _query_params.append(('receiverUmaAddress', receiver_uma_address))
            
        if status is not None:
            
            _query_params.append(('status', status.value))
            
        if type is not None:
            
            _query_params.append(('type', type.value))
            
        if reference is not None:
            
            _query_params.append(('reference', reference))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def reject_pending_payment(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction to reject")],
        reject_pending_payment_request: Optional[RejectPendingPaymentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IncomingTransaction:
        """Reject a pending incoming payment

        Reject a pending incoming payment that was previously acknowledged with a 202 response. This endpoint allows platforms to asynchronously reject payments after additional processing. 

        :param transaction_id: Unique identifier of the transaction to reject (required)
        :type transaction_id: str
        :param reject_pending_payment_request:
        :type reject_pending_payment_request: RejectPendingPaymentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reject_pending_payment_serialize(
            transaction_id=transaction_id,
            reject_pending_payment_request=reject_pending_payment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IncomingTransaction",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '409': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reject_pending_payment_with_http_info(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction to reject")],
        reject_pending_payment_request: Optional[RejectPendingPaymentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IncomingTransaction]:
        """Reject a pending incoming payment

        Reject a pending incoming payment that was previously acknowledged with a 202 response. This endpoint allows platforms to asynchronously reject payments after additional processing. 

        :param transaction_id: Unique identifier of the transaction to reject (required)
        :type transaction_id: str
        :param reject_pending_payment_request:
        :type reject_pending_payment_request: RejectPendingPaymentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reject_pending_payment_serialize(
            transaction_id=transaction_id,
            reject_pending_payment_request=reject_pending_payment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IncomingTransaction",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '409': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reject_pending_payment_without_preload_content(
        self,
        transaction_id: Annotated[StrictStr, Field(description="Unique identifier of the transaction to reject")],
        reject_pending_payment_request: Optional[RejectPendingPaymentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reject a pending incoming payment

        Reject a pending incoming payment that was previously acknowledged with a 202 response. This endpoint allows platforms to asynchronously reject payments after additional processing. 

        :param transaction_id: Unique identifier of the transaction to reject (required)
        :type transaction_id: str
        :param reject_pending_payment_request:
        :type reject_pending_payment_request: RejectPendingPaymentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reject_pending_payment_serialize(
            transaction_id=transaction_id,
            reject_pending_payment_request=reject_pending_payment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IncomingTransaction",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '409': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reject_pending_payment_serialize(
        self,
        transaction_id,
        reject_pending_payment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if transaction_id is not None:
            _path_params['transactionId'] = transaction_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if reject_pending_payment_request is not None:
            _body_params = reject_pending_payment_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/transactions/{transactionId}/reject',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


