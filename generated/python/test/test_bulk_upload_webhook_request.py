# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from umaaas_api.models.bulk_upload_webhook_request import BulkUploadWebhookRequest

class TestBulkUploadWebhookRequest(unittest.TestCase):
    """BulkUploadWebhookRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BulkUploadWebhookRequest:
        """Test BulkUploadWebhookRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BulkUploadWebhookRequest`
        """
        model = BulkUploadWebhookRequest()
        if include_optional:
            return BulkUploadWebhookRequest(
                bulk_user_import_job = umaaas_api.models.bulk_user_import_job.BulkUserImportJob(
                    job_id = 'Job:019542f5-b3e7-1d02-0000-000000000006', 
                    status = 'PROCESSING', 
                    progress = umaaas_api.models.bulk_user_import_job_progress.BulkUserImportJob_progress(
                        total = 5000, 
                        processed = 2500, 
                        successful = 2450, 
                        failed = 50, ), 
                    errors = [
                        umaaas_api.models.bulk_user_import_job_errors_inner.BulkUserImportJob_errors_inner(
                            correlation_id = 'biz456', 
                            error = umaaas_api.models.error.Error(
                                code = '', 
                                message = '', 
                                details = umaaas_api.models.details.details(), ), )
                        ], 
                    completed_at = '2023-08-15T14:32:00Z', ),
                timestamp = '2023-08-15T14:32:00Z',
                webhook_id = 'Webhook:019542f5-b3e7-1d02-0000-000000000008',
                type = BULK_UPLOAD
            )
        else:
            return BulkUploadWebhookRequest(
                bulk_user_import_job = umaaas_api.models.bulk_user_import_job.BulkUserImportJob(
                    job_id = 'Job:019542f5-b3e7-1d02-0000-000000000006', 
                    status = 'PROCESSING', 
                    progress = umaaas_api.models.bulk_user_import_job_progress.BulkUserImportJob_progress(
                        total = 5000, 
                        processed = 2500, 
                        successful = 2450, 
                        failed = 50, ), 
                    errors = [
                        umaaas_api.models.bulk_user_import_job_errors_inner.BulkUserImportJob_errors_inner(
                            correlation_id = 'biz456', 
                            error = umaaas_api.models.error.Error(
                                code = '', 
                                message = '', 
                                details = umaaas_api.models.details.details(), ), )
                        ], 
                    completed_at = '2023-08-15T14:32:00Z', ),
                timestamp = '2023-08-15T14:32:00Z',
                webhook_id = 'Webhook:019542f5-b3e7-1d02-0000-000000000008',
                type = BULK_UPLOAD,
        )
        """

    def testBulkUploadWebhookRequest(self):
        """Test BulkUploadWebhookRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
