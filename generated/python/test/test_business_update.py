# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from umaaas_api.models.business_update import BusinessUpdate

class TestBusinessUpdate(unittest.TestCase):
    """BusinessUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BusinessUpdate:
        """Test BusinessUpdate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BusinessUpdate`
        """
        model = BusinessUpdate()
        if include_optional:
            return BusinessUpdate(
                uma_address = '',
                business_info = umaaas_api.models.business_update_business_info.businessUpdate_businessInfo(
                    legal_name = '', 
                    registration_number = '', 
                    tax_id = '', ),
                address = umaaas_api.models.address.Address(
                    line1 = '123 Main Street', 
                    line2 = 'Apt 4B', 
                    city = 'San Francisco', 
                    state = 'CA', 
                    postal_code = '94105', 
                    country = 'US', ),
                bank_account_info = umaaas_api.models.user_bank_account_info.UserBankAccountInfo(
                    account_type = 'CLABE', 
                    platform_account_id = 'acc_123456789', )
            )
        else:
            return BusinessUpdate(
        )
        """

    def testBusinessUpdate(self):
        """Test BusinessUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
