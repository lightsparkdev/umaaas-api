# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 2025-05-15
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from umaaas_api.models.quote import Quote

class TestQuote(unittest.TestCase):
    """Quote unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Quote:
        """Test Quote
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Quote`
        """
        model = Quote()
        if include_optional:
            return Quote(
                quote_id = 'Quote:019542f5-b3e7-1d02-0000-000000000006',
                sending_currency = umaaas_api.models.currency.Currency(
                    code = 'USD', 
                    name = 'United States Dollar', 
                    symbol = '$', 
                    decimals = 2, ),
                receiving_currency = umaaas_api.models.currency.Currency(
                    code = 'USD', 
                    name = 'United States Dollar', 
                    symbol = '$', 
                    decimals = 2, ),
                total_sending_amount = 123010,
                total_receiving_amount = 1000,
                exchange_rate = 1.337,
                expires_at = '2023-09-01T14:30:00Z',
                fees_included = 10,
                counterparty_information = {FULL_NAME=Jane Receiver, DATE_OF_BIRTH=1990-01-01, NATIONALITY=FR},
                payment_instructions = umaaas_api.models.payment_instructions.PaymentInstructions(
                    reference = 'UMA-Q12345-REF', 
                    instructions_notes = 'Please ensure the reference code is included in the payment memo/description field', 
                    bank_account_info = umaaas_api.models.payment_bank_account_info.PaymentBankAccountInfo(
                        account_type = 'CLABE', ), ),
                status = 'PENDING',
                transaction_id = 'Transaction:019542f5-b3e7-1d02-0000-000000000005',
                rate_details = umaaas_api.models.outgoing_rate_details.OutgoingRateDetails(
                    counterparty_multiplier = 1.08, 
                    counterparty_fixed_fee = 10, 
                    umaaas_multiplier = 0.925, 
                    umaaas_fixed_fee = 10, 
                    umaaas_variable_fee_rate = 0.003, 
                    umaaas_variable_fee_amount = 30, )
            )
        else:
            return Quote(
                quote_id = 'Quote:019542f5-b3e7-1d02-0000-000000000006',
                sending_currency = umaaas_api.models.currency.Currency(
                    code = 'USD', 
                    name = 'United States Dollar', 
                    symbol = '$', 
                    decimals = 2, ),
                receiving_currency = umaaas_api.models.currency.Currency(
                    code = 'USD', 
                    name = 'United States Dollar', 
                    symbol = '$', 
                    decimals = 2, ),
                total_sending_amount = 123010,
                total_receiving_amount = 1000,
                exchange_rate = 1.337,
                expires_at = '2023-09-01T14:30:00Z',
                fees_included = 10,
                payment_instructions = umaaas_api.models.payment_instructions.PaymentInstructions(
                    reference = 'UMA-Q12345-REF', 
                    instructions_notes = 'Please ensure the reference code is included in the payment memo/description field', 
                    bank_account_info = umaaas_api.models.payment_bank_account_info.PaymentBankAccountInfo(
                        account_type = 'CLABE', ), ),
                transaction_id = 'Transaction:019542f5-b3e7-1d02-0000-000000000005',
        )
        """

    def testQuote(self):
        """Test Quote"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
