/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import com.lightspark.umaaas.models.Currency
import com.lightspark.umaaas.models.PaymentInstructions

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param quoteId Unique identifier for this quote
 * @param sendingCurrency 
 * @param receivingCurrency 
 * @param totalSendingAmount The total amount that will be sent in the smallest unit of the sending currency (eg. cents).
 * @param totalReceivingAmount The total amount that will be received in the smallest unit of the receiving currency (eg. cents).
 * @param exchangeRate Number of sending currency units per receiving currency unit.
 * @param expiresAt When this quote expires (typically 1-5 minutes after creation)
 * @param feesIncluded The fees associated with the quote in the smallest unit of the sending currency (eg. cents).
 * @param paymentInstructions 
 * @param transactionId The ID of the transaction created from this quote.
 * @param counterpartyInformation Information about the recipient, as required by the platform in their configuration.
 * @param status Current status of the quote
 */


data class Quote (

    /* Unique identifier for this quote */
    @get:JsonProperty("quoteId")
    val quoteId: kotlin.String,

    @get:JsonProperty("sendingCurrency")
    val sendingCurrency: Currency,

    @get:JsonProperty("receivingCurrency")
    val receivingCurrency: Currency,

    /* The total amount that will be sent in the smallest unit of the sending currency (eg. cents). */
    @get:JsonProperty("totalSendingAmount")
    val totalSendingAmount: kotlin.Long,

    /* The total amount that will be received in the smallest unit of the receiving currency (eg. cents). */
    @get:JsonProperty("totalReceivingAmount")
    val totalReceivingAmount: kotlin.Long,

    /* Number of sending currency units per receiving currency unit. */
    @get:JsonProperty("exchangeRate")
    val exchangeRate: java.math.BigDecimal,

    /* When this quote expires (typically 1-5 minutes after creation) */
    @get:JsonProperty("expiresAt")
    val expiresAt: java.time.OffsetDateTime,

    /* The fees associated with the quote in the smallest unit of the sending currency (eg. cents). */
    @get:JsonProperty("feesIncluded")
    val feesIncluded: kotlin.Long,

    @get:JsonProperty("paymentInstructions")
    val paymentInstructions: PaymentInstructions,

    /* The ID of the transaction created from this quote. */
    @get:JsonProperty("transactionId")
    val transactionId: kotlin.String,

    /* Information about the recipient, as required by the platform in their configuration. */
    @get:JsonProperty("counterpartyInformation")
    val counterpartyInformation: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    /* Current status of the quote */
    @get:JsonProperty("status")
    val status: Quote.Status? = null

) {

    /**
     * Current status of the quote
     *
     * Values: PENDING,PROCESSING,COMPLETED,FAILED,EXPIRED
     */
    enum class Status(val value: kotlin.String) {
        @JsonProperty(value = "PENDING") PENDING("PENDING"),
        @JsonProperty(value = "PROCESSING") PROCESSING("PROCESSING"),
        @JsonProperty(value = "COMPLETED") COMPLETED("COMPLETED"),
        @JsonProperty(value = "FAILED") FAILED("FAILED"),
        @JsonProperty(value = "EXPIRED") EXPIRED("EXPIRED");
    }

}

