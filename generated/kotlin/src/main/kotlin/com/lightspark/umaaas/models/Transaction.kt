/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import com.lightspark.umaaas.models.TransactionStatus
import com.lightspark.umaaas.models.TransactionType

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo

/**
 * 
 *
 * @param id Unique identifier for the transaction
 * @param status 
 * @param type 
 * @param senderUmaAddress UMA address of the payment sender
 * @param receiverUmaAddress UMA address of the payment recipient
 * @param userId System ID of the user (sender for outgoing, recipient for incoming)
 * @param platformUserId Platform-specific ID of the user (sender for outgoing, recipient for incoming)
 * @param settledAt When the payment was or will be settled
 * @param createdAt When the transaction was created
 * @param description Optional memo or description for the payment
 * @param counterpartyInformation Additional information about the counterparty, if available
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes(
    JsonSubTypes.Type(value = IncomingTransaction::class, name = "INCOMING"),
    JsonSubTypes.Type(value = OutgoingTransaction::class, name = "OUTGOING")
)

interface Transaction {

    /* Unique identifier for the transaction */
    @get:JsonProperty("id")
    val id: kotlin.String
    @get:JsonProperty("status")
    val status: TransactionStatus
    @get:JsonProperty("type")
    val type: TransactionType
    /* UMA address of the payment sender */
    @get:JsonProperty("senderUmaAddress")
    val senderUmaAddress: kotlin.String
    /* UMA address of the payment recipient */
    @get:JsonProperty("receiverUmaAddress")
    val receiverUmaAddress: kotlin.String
    /* System ID of the user (sender for outgoing, recipient for incoming) */
    @get:JsonProperty("userId")
    val userId: kotlin.String
    /* Platform-specific ID of the user (sender for outgoing, recipient for incoming) */
    @get:JsonProperty("platformUserId")
    val platformUserId: kotlin.String
    /* When the payment was or will be settled */
    @get:JsonProperty("settledAt")
    val settledAt: java.time.OffsetDateTime?
    /* When the transaction was created */
    @get:JsonProperty("createdAt")
    val createdAt: java.time.OffsetDateTime?
    /* Optional memo or description for the payment */
    @get:JsonProperty("description")
    val description: kotlin.String?
    /* Additional information about the counterparty, if available */
    @get:JsonProperty("counterpartyInformation")
    val counterpartyInformation: kotlin.collections.Map<kotlin.String, kotlin.Any>?

}

