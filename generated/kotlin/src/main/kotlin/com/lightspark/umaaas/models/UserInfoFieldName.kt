/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * Name of a type of field containing info about a platform's user or counterparty user.
 *
 * Values: FULL_NAME,DATE_OF_BIRTH,NATIONALITY,PHONE_NUMBER,EMAIL,ADDRESS,TAX_ID,REGISTRATION_NUMBER,ACCOUNT_NUMBER,USER_TYPE
 */

enum class UserInfoFieldName(val value: kotlin.String) {

    @JsonProperty(value = "FULL_NAME")
    FULL_NAME("FULL_NAME"),

    @JsonProperty(value = "DATE_OF_BIRTH")
    DATE_OF_BIRTH("DATE_OF_BIRTH"),

    @JsonProperty(value = "NATIONALITY")
    NATIONALITY("NATIONALITY"),

    @JsonProperty(value = "PHONE_NUMBER")
    PHONE_NUMBER("PHONE_NUMBER"),

    @JsonProperty(value = "EMAIL")
    EMAIL("EMAIL"),

    @JsonProperty(value = "ADDRESS")
    ADDRESS("ADDRESS"),

    @JsonProperty(value = "TAX_ID")
    TAX_ID("TAX_ID"),

    @JsonProperty(value = "REGISTRATION_NUMBER")
    REGISTRATION_NUMBER("REGISTRATION_NUMBER"),

    @JsonProperty(value = "ACCOUNT_NUMBER")
    ACCOUNT_NUMBER("ACCOUNT_NUMBER"),

    @JsonProperty(value = "USER_TYPE")
    USER_TYPE("USER_TYPE");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is UserInfoFieldName) "$data" else null

        /**
         * Returns a valid [UserInfoFieldName] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): UserInfoFieldName? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

