/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import com.lightspark.umaaas.models.CurrencyAmount

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param code The unique code of the invitation
 * @param createdAt When the invitation was created
 * @param url The URL where this invitation can be claimed.
 * @param inviterUma The UMA address of the inviter
 * @param status The status of the invitation
 * @param claimedAt When the invitation was claimed if it has been claimed
 * @param expiresAt When the invitation expires (if at all)
 * @param inviteeUma The UMA address of the invitee
 * @param amountToSend The amount to send to the invitee when the invitation is claimed. This is optional and if not provided, the invitee will not receive any amount. Note that the actual sending of the amount must be done by the inviter platform once the INVITATION_CLAIMED webhook is received. If the inviter platform either does not send the payment or the payment fails, the invitee will not receive this amount. This field is primarily used for display purposes on the claiming side of the invitation. This field is useful for \"send-by-link\" style user flows where an inviter can send a payment simply by sharing a link without knowing the receiver's UMA address. Note that these sends can only be sender-locked, meaning that the sender will not know ahead of time how much the receiver will receive in the receiving currency.
 */


data class UmaInvitation (

    /* The unique code of the invitation */
    @get:JsonProperty("code")
    val code: kotlin.String,

    /* When the invitation was created */
    @get:JsonProperty("createdAt")
    val createdAt: java.time.OffsetDateTime,

    /* The URL where this invitation can be claimed. */
    @get:JsonProperty("url")
    val url: kotlin.String,

    /* The UMA address of the inviter */
    @get:JsonProperty("inviterUma")
    val inviterUma: kotlin.String,

    /* The status of the invitation */
    @get:JsonProperty("status")
    val status: UmaInvitation.Status,

    /* When the invitation was claimed if it has been claimed */
    @get:JsonProperty("claimedAt")
    val claimedAt: java.time.OffsetDateTime? = null,

    /* When the invitation expires (if at all) */
    @get:JsonProperty("expiresAt")
    val expiresAt: java.time.OffsetDateTime? = null,

    /* The UMA address of the invitee */
    @get:JsonProperty("inviteeUma")
    val inviteeUma: kotlin.String? = null,

    /* The amount to send to the invitee when the invitation is claimed. This is optional and if not provided, the invitee will not receive any amount. Note that the actual sending of the amount must be done by the inviter platform once the INVITATION_CLAIMED webhook is received. If the inviter platform either does not send the payment or the payment fails, the invitee will not receive this amount. This field is primarily used for display purposes on the claiming side of the invitation. This field is useful for \"send-by-link\" style user flows where an inviter can send a payment simply by sharing a link without knowing the receiver's UMA address. Note that these sends can only be sender-locked, meaning that the sender will not know ahead of time how much the receiver will receive in the receiving currency. */
    @get:JsonProperty("amountToSend")
    val amountToSend: CurrencyAmount? = null

) {

    /**
     * The status of the invitation
     *
     * Values: PENDING,CLAIMED,EXPIRED,CANCELLED
     */
    enum class Status(val value: kotlin.String) {
        @JsonProperty(value = "PENDING") PENDING("PENDING"),
        @JsonProperty(value = "CLAIMED") CLAIMED("CLAIMED"),
        @JsonProperty(value = "EXPIRED") EXPIRED("EXPIRED"),
        @JsonProperty(value = "CANCELLED") CANCELLED("CANCELLED");
    }

}

