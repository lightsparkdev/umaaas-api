/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import com.lightspark.umaaas.models.CurrencyAmount
import com.lightspark.umaaas.models.Refund
import com.lightspark.umaaas.models.Transaction
import com.lightspark.umaaas.models.TransactionStatus
import com.lightspark.umaaas.models.TransactionType

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param id Unique identifier for the transaction
 * @param status 
 * @param type 
 * @param senderUmaAddress UMA address of the payment sender
 * @param receiverUmaAddress UMA address of the payment recipient
 * @param userId System ID of the user (sender for outgoing, recipient for incoming)
 * @param platformUserId Platform-specific ID of the user (sender for outgoing, recipient for incoming)
 * @param sentAmount Amount sent in the sender's currency
 * @param settledAt When the payment was or will be settled
 * @param createdAt When the transaction was created
 * @param description Optional memo or description for the payment
 * @param counterpartyInformation Additional information about the counterparty, if available
 * @param receivedAmount Amount to be received by recipient in the recipient's currency
 * @param exchangeRate Number of sending currency units per receiving currency unit.
 * @param fees The fees associated with the quote in the smallest unit of the sending currency (eg. cents).
 * @param quoteId The ID of the quote that was used to trigger this payment
 * @param refund The refund if transaction was refunded.
 */


data class OutgoingTransaction (

    /* Unique identifier for the transaction */
    @get:JsonProperty("id")
    override val id: kotlin.String,

    @get:JsonProperty("status")
    override val status: TransactionStatus,

    @get:JsonProperty("type")
    override val type: TransactionType,

    /* UMA address of the payment sender */
    @get:JsonProperty("senderUmaAddress")
    override val senderUmaAddress: kotlin.String,

    /* UMA address of the payment recipient */
    @get:JsonProperty("receiverUmaAddress")
    override val receiverUmaAddress: kotlin.String,

    /* System ID of the user (sender for outgoing, recipient for incoming) */
    @get:JsonProperty("userId")
    override val userId: kotlin.String,

    /* Platform-specific ID of the user (sender for outgoing, recipient for incoming) */
    @get:JsonProperty("platformUserId")
    override val platformUserId: kotlin.String,

    /* Amount sent in the sender's currency */
    @get:JsonProperty("sentAmount")
    val sentAmount: CurrencyAmount,

    /* When the payment was or will be settled */
    @get:JsonProperty("settledAt")
    override val settledAt: java.time.OffsetDateTime? = null,

    /* When the transaction was created */
    @get:JsonProperty("createdAt")
    override val createdAt: java.time.OffsetDateTime? = null,

    /* Optional memo or description for the payment */
    @get:JsonProperty("description")
    override val description: kotlin.String? = null,

    /* Additional information about the counterparty, if available */
    @get:JsonProperty("counterpartyInformation")
    override val counterpartyInformation: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    /* Amount to be received by recipient in the recipient's currency */
    @get:JsonProperty("receivedAmount")
    val receivedAmount: CurrencyAmount? = null,

    /* Number of sending currency units per receiving currency unit. */
    @get:JsonProperty("exchangeRate")
    val exchangeRate: java.math.BigDecimal? = null,

    /* The fees associated with the quote in the smallest unit of the sending currency (eg. cents). */
    @get:JsonProperty("fees")
    val fees: kotlin.Long? = null,

    /* The ID of the quote that was used to trigger this payment */
    @get:JsonProperty("quoteId")
    val quoteId: kotlin.String? = null,

    /* The refund if transaction was refunded. */
    @get:JsonProperty("refund")
    val refund: Refund? = null

) : Transaction {


}

