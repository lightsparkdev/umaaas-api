/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.lightspark.umaaas.models.OutgoingTransaction
import com.lightspark.umaaas.models.CurrencyAmount
import com.lightspark.umaaas.models.Refund
import com.lightspark.umaaas.models.Transaction
import com.lightspark.umaaas.models.TransactionStatus
import com.lightspark.umaaas.models.TransactionType

class OutgoingTransactionTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OutgoingTransaction
        //val modelInstance = OutgoingTransaction()

        // to test the property `sentAmount` - Amount sent in the sender's currency
        should("test sentAmount") {
            // uncomment below to test the property
            //modelInstance.sentAmount shouldBe ("TODO")
        }

        // to test the property `receivedAmount` - Amount to be received by recipient in the recipient's currency
        should("test receivedAmount") {
            // uncomment below to test the property
            //modelInstance.receivedAmount shouldBe ("TODO")
        }

        // to test the property `exchangeRate` - Number of sending currency units per receiving currency unit.
        should("test exchangeRate") {
            // uncomment below to test the property
            //modelInstance.exchangeRate shouldBe ("TODO")
        }

        // to test the property `fees` - The fees associated with the quote in the smallest unit of the sending currency (eg. cents).
        should("test fees") {
            // uncomment below to test the property
            //modelInstance.fees shouldBe ("TODO")
        }

        // to test the property `quoteId` - The ID of the quote that was used to trigger this payment
        should("test quoteId") {
            // uncomment below to test the property
            //modelInstance.quoteId shouldBe ("TODO")
        }

        // to test the property `refund` - The refund if transaction was refunded.
        should("test refund") {
            // uncomment below to test the property
            //modelInstance.refund shouldBe ("TODO")
        }

    }
}
