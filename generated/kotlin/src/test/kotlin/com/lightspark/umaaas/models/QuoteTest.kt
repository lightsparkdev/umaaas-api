/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.lightspark.umaaas.models.Quote
import com.lightspark.umaaas.models.Currency
import com.lightspark.umaaas.models.PaymentInstructions

class QuoteTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Quote
        //val modelInstance = Quote()

        // to test the property `quoteId` - Unique identifier for this quote
        should("test quoteId") {
            // uncomment below to test the property
            //modelInstance.quoteId shouldBe ("TODO")
        }

        // to test the property `sendingCurrency`
        should("test sendingCurrency") {
            // uncomment below to test the property
            //modelInstance.sendingCurrency shouldBe ("TODO")
        }

        // to test the property `receivingCurrency`
        should("test receivingCurrency") {
            // uncomment below to test the property
            //modelInstance.receivingCurrency shouldBe ("TODO")
        }

        // to test the property `totalSendingAmount` - The total amount that will be sent in the smallest unit of the sending currency (eg. cents).
        should("test totalSendingAmount") {
            // uncomment below to test the property
            //modelInstance.totalSendingAmount shouldBe ("TODO")
        }

        // to test the property `totalReceivingAmount` - The total amount that will be received in the smallest unit of the receiving currency (eg. cents).
        should("test totalReceivingAmount") {
            // uncomment below to test the property
            //modelInstance.totalReceivingAmount shouldBe ("TODO")
        }

        // to test the property `exchangeRate` - Number of sending currency units per receiving currency unit.
        should("test exchangeRate") {
            // uncomment below to test the property
            //modelInstance.exchangeRate shouldBe ("TODO")
        }

        // to test the property `expiresAt` - When this quote expires (typically 1-5 minutes after creation)
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `feesIncluded` - The fees associated with the quote in the smallest unit of the sending currency (eg. cents).
        should("test feesIncluded") {
            // uncomment below to test the property
            //modelInstance.feesIncluded shouldBe ("TODO")
        }

        // to test the property `paymentInstructions`
        should("test paymentInstructions") {
            // uncomment below to test the property
            //modelInstance.paymentInstructions shouldBe ("TODO")
        }

        // to test the property `transactionId` - The ID of the transaction created from this quote.
        should("test transactionId") {
            // uncomment below to test the property
            //modelInstance.transactionId shouldBe ("TODO")
        }

        // to test the property `counterpartyInformation` - Information about the recipient, as required by the platform in their configuration.
        should("test counterpartyInformation") {
            // uncomment below to test the property
            //modelInstance.counterpartyInformation shouldBe ("TODO")
        }

        // to test the property `status` - Current status of the quote
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

    }
}
