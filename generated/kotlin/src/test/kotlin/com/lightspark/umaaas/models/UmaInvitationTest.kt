/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.lightspark.umaaas.models.UmaInvitation
import com.lightspark.umaaas.models.CurrencyAmount

class UmaInvitationTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UmaInvitation
        //val modelInstance = UmaInvitation()

        // to test the property `code` - The unique code of the invitation
        should("test code") {
            // uncomment below to test the property
            //modelInstance.code shouldBe ("TODO")
        }

        // to test the property `createdAt` - When the invitation was created
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `url` - The URL where this invitation can be claimed.
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `inviterUma` - The UMA address of the inviter
        should("test inviterUma") {
            // uncomment below to test the property
            //modelInstance.inviterUma shouldBe ("TODO")
        }

        // to test the property `status` - The status of the invitation
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `claimedAt` - When the invitation was claimed if it has been claimed
        should("test claimedAt") {
            // uncomment below to test the property
            //modelInstance.claimedAt shouldBe ("TODO")
        }

        // to test the property `expiresAt` - When the invitation expires (if at all)
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `inviteeUma` - The UMA address of the invitee
        should("test inviteeUma") {
            // uncomment below to test the property
            //modelInstance.inviteeUma shouldBe ("TODO")
        }

        // to test the property `amountToSend` - The amount to send to the invitee when the invitation is claimed. This is optional and if not provided, the invitee will not receive any amount. Note that the actual sending of the amount must be done by the inviter platform once the INVITATION_CLAIMED webhook is received. If the inviter platform either does not send the payment or the payment fails, the invitee will not receive this amount. This field is primarily used for display purposes on the claiming side of the invitation. This field is useful for \"send-by-link\" style user flows where an inviter can send a payment simply by sharing a link without knowing the receiver's UMA address. Note that these sends can only be sender-locked, meaning that the sender will not know ahead of time how much the receiver will receive in the receiving currency.
        should("test amountToSend") {
            // uncomment below to test the property
            //modelInstance.amountToSend shouldBe ("TODO")
        }

    }
}
