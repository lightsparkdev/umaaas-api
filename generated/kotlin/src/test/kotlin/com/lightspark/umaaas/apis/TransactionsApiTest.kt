/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lightspark.umaaas.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.lightspark.umaaas.apis.TransactionsApi
import com.lightspark.umaaas.models.ApprovePendingPaymentRequest
import com.lightspark.umaaas.models.Error
import com.lightspark.umaaas.models.IncomingTransaction
import com.lightspark.umaaas.models.ListTransactions200Response
import com.lightspark.umaaas.models.RejectPendingPaymentRequest
import com.lightspark.umaaas.models.Transaction
import com.lightspark.umaaas.models.TransactionStatus
import com.lightspark.umaaas.models.TransactionType

class TransactionsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TransactionsApi
        //val apiInstance = TransactionsApi()

        // to test approvePendingPayment
        should("test approvePendingPayment") {
            // uncomment below to test approvePendingPayment
            //val transactionId : kotlin.String = transactionId_example // kotlin.String | Unique identifier of the transaction to approve
            //val approvePendingPaymentRequest : ApprovePendingPaymentRequest =  // ApprovePendingPaymentRequest | 
            //val result : IncomingTransaction = apiInstance.approvePendingPayment(transactionId, approvePendingPaymentRequest)
            //result shouldBe ("TODO")
        }

        // to test getTransactionById
        should("test getTransactionById") {
            // uncomment below to test getTransactionById
            //val transactionId : kotlin.String = transactionId_example // kotlin.String | Unique identifier of the transaction
            //val result : Transaction = apiInstance.getTransactionById(transactionId)
            //result shouldBe ("TODO")
        }

        // to test listTransactions
        should("test listTransactions") {
            // uncomment below to test listTransactions
            //val userId : kotlin.String = userId_example // kotlin.String | Filter by system user ID
            //val platformUserId : kotlin.String = platformUserId_example // kotlin.String | Filter by platform-specific user ID
            //val umaAddress : kotlin.String = umaAddress_example // kotlin.String | Filter by UMA address (either sender or receiver)
            //val senderUmaAddress : kotlin.String = senderUmaAddress_example // kotlin.String | Filter by sender UMA address
            //val receiverUmaAddress : kotlin.String = receiverUmaAddress_example // kotlin.String | Filter by receiver UMA address
            //val status : TransactionStatus =  // TransactionStatus | Filter by transaction status
            //val type : TransactionType =  // TransactionType | Filter by transaction type
            //val reference : kotlin.String = reference_example // kotlin.String | Filter by reference
            //val startDate : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Filter by start date (inclusive) in ISO 8601 format
            //val endDate : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Filter by end date (inclusive) in ISO 8601 format
            //val limit : kotlin.Int = 56 // kotlin.Int | Maximum number of results to return (default 20, max 100)
            //val cursor : kotlin.String = cursor_example // kotlin.String | Cursor for pagination (returned from previous request)
            //val sortOrder : kotlin.String = sortOrder_example // kotlin.String | Order to sort results in
            //val result : ListTransactions200Response = apiInstance.listTransactions(userId, platformUserId, umaAddress, senderUmaAddress, receiverUmaAddress, status, type, reference, startDate, endDate, limit, cursor, sortOrder)
            //result shouldBe ("TODO")
        }

        // to test rejectPendingPayment
        should("test rejectPendingPayment") {
            // uncomment below to test rejectPendingPayment
            //val transactionId : kotlin.String = transactionId_example // kotlin.String | Unique identifier of the transaction to reject
            //val rejectPendingPaymentRequest : RejectPendingPaymentRequest =  // RejectPendingPaymentRequest | 
            //val result : IncomingTransaction = apiInstance.rejectPendingPayment(transactionId, rejectPendingPaymentRequest)
            //result shouldBe ("TODO")
        }

    }
}
