# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from umaaas_api.models.quote_lock_side import QuoteLockSide
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateQuoteRequest(BaseModel):
    """
    CreateQuoteRequest
    """ # noqa: E501
    receiver_uma_address: StrictStr = Field(description="UMA address of the recipient", alias="receiverUmaAddress")
    sender_uma_address: Optional[StrictStr] = Field(default=None, description="UMA address of the sender (optional if userId or platformUserId is provided)", alias="senderUmaAddress")
    user_id: Optional[StrictStr] = Field(default=None, description="System ID of the sender (optional if senderUmaAddress or platformUserId is provided)", alias="userId")
    platform_user_id: Optional[StrictStr] = Field(default=None, description="Platform ID of the sender (optional if senderUmaAddress or userId is provided)", alias="platformUserId")
    sending_currency_code: StrictStr = Field(description="Currency code for the sending amount", alias="sendingCurrencyCode")
    receiving_currency_code: StrictStr = Field(description="Currency code for the receiving amount", alias="receivingCurrencyCode")
    locked_currency_side: QuoteLockSide = Field(alias="lockedCurrencySide")
    locked_currency_amount: StrictInt = Field(description="The amount to send/receive in the smallest unit of the locked currency (eg. cents). See `lockedCurrencySide` for more information.", alias="lockedCurrencyAmount")
    description: Optional[StrictStr] = Field(default=None, description="Optional description/memo for the payment")
    __properties: ClassVar[List[str]] = ["receiverUmaAddress", "senderUmaAddress", "userId", "platformUserId", "sendingCurrencyCode", "receivingCurrencyCode", "lockedCurrencySide", "lockedCurrencyAmount", "description"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateQuoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude={
            },
            exclude_none=True,
            exclude_unset=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateQuoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "receiverUmaAddress": obj.get("receiverUmaAddress"),
            "senderUmaAddress": obj.get("senderUmaAddress"),
            "userId": obj.get("userId"),
            "platformUserId": obj.get("platformUserId"),
            "sendingCurrencyCode": obj.get("sendingCurrencyCode"),
            "receivingCurrencyCode": obj.get("receivingCurrencyCode"),
            "lockedCurrencySide": obj.get("lockedCurrencySide"),
            "lockedCurrencyAmount": obj.get("lockedCurrencyAmount"),
            "description": obj.get("description")
        })
        return _obj


