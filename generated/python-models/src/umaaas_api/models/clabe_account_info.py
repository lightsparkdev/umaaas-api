# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from umaaas_api.models.bank_account_info import BankAccountInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClabeAccountInfo(BankAccountInfo):
    """
    ClabeAccountInfo
    """ # noqa: E501
    account_type: StrictStr = Field(description="Type of bank account information", alias="accountType")
    account_holder_name: Optional[StrictStr] = Field(default=None, description="Name of the account holder", alias="accountHolderName")
    platform_account_id: Optional[StrictStr] = Field(default=None, description="Platform-specific identifier for this bank account. This optional field allows platforms to link bank accounts to their internal account systems. The value can be any string that helps identify the account in your system (e.g. database IDs, custom references, etc.).  This field is particularly useful when: - Tracking multiple bank accounts for the same user - Linking accounts to internal accounting systems - Maintaining consistency between UMAaS and your platform's account records ", alias="platformAccountId")
    clabe_number: Annotated[str, Field(min_length=18, strict=True, max_length=18)] = Field(description="18-digit CLABE number (Mexican banking standard)", alias="clabeNumber")
    bank_name: StrictStr = Field(description="Name of the bank", alias="bankName")
    __properties: ClassVar[List[str]] = ["accountType", "accountHolderName", "platformAccountId", "clabeNumber", "bankName"]

    @field_validator('account_type')
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CLABE', 'US_ACCOUNT', 'PIX', 'IBAN'):
            raise ValueError("must be one of enum values ('CLABE', 'US_ACCOUNT', 'PIX', 'IBAN')")
        return value

    @field_validator('clabe_number')
    def clabe_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{18}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{18}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClabeAccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude={
            },
            exclude_none=True,
            exclude_unset=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClabeAccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountType": obj.get("accountType"),
            "accountHolderName": obj.get("accountHolderName"),
            "platformAccountId": obj.get("platformAccountId"),
            "clabeNumber": obj.get("clabeNumber"),
            "bankName": obj.get("bankName")
        })
        return _obj


