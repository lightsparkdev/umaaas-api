# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from umaaas_api.models.counterparty_field_definition import CounterpartyFieldDefinition
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdatePlatformConfigRequest(BaseModel):
    """
    UpdatePlatformConfigRequest
    """ # noqa: E501
    uma_domain: Optional[StrictStr] = Field(default=None, alias="umaDomain")
    webhook_endpoint: Optional[StrictStr] = Field(default=None, alias="webhookEndpoint")
    required_counterparty_fields: Optional[List[CounterpartyFieldDefinition]] = Field(default=None, alias="requiredCounterpartyFields")
    __properties: ClassVar[List[str]] = ["umaDomain", "webhookEndpoint", "requiredCounterpartyFields"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdatePlatformConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude={
            },
            exclude_none=True,
            exclude_unset=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in required_counterparty_fields (list)
        _items = []
        if self.required_counterparty_fields:
            for _item in self.required_counterparty_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['requiredCounterpartyFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdatePlatformConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "umaDomain": obj.get("umaDomain"),
            "webhookEndpoint": obj.get("webhookEndpoint"),
            "requiredCounterpartyFields": [CounterpartyFieldDefinition.from_dict(_item) for _item in obj.get("requiredCounterpartyFields")] if obj.get("requiredCounterpartyFields") is not None else None
        })
        return _obj


