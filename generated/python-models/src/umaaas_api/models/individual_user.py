# coding: utf-8

"""
    UMA as a Service (UMAaaS) API

    API for managing global payments to and from UMA addresses.  This service facilitates cross-currency financial transactions using simple human-readable UMA addresses. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightspark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date, datetime
from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from umaaas_api.models.address import Address
from umaaas_api.models.bank_account_info import BankAccountInfo
from umaaas_api.models.user import User
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IndividualUser(User):
    """
    IndividualUser
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="System-generated unique identifier")
    uma_address: StrictStr = Field(description="full UMA address", alias="umaAddress")
    platform_user_id: StrictStr = Field(description="Platform-specific user identifier", alias="platformUserId")
    user_type: StrictStr = Field(description="Whether the user is an individual or a business entity", alias="userType")
    created_at: Optional[datetime] = Field(default=None, description="Creation timestamp", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="Last update timestamp", alias="updatedAt")
    full_name: StrictStr = Field(description="Individual's full name", alias="fullName")
    date_of_birth: date = Field(description="Date of birth in ISO 8601 format (YYYY-MM-DD)", alias="dateOfBirth")
    address: Address
    bank_account_info: BankAccountInfo = Field(alias="bankAccountInfo")
    __properties: ClassVar[List[str]] = ["id", "umaAddress", "platformUserId", "userType", "createdAt", "updatedAt", "fullName", "dateOfBirth", "address", "bankAccountInfo"]

    @field_validator('user_type')
    def user_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('INDIVIDUAL', 'BUSINESS'):
            raise ValueError("must be one of enum values ('INDIVIDUAL', 'BUSINESS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IndividualUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            mode="json",
            by_alias=True,
            exclude={
                "id",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
            exclude_unset=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account_info
        if self.bank_account_info:
            _dict['bankAccountInfo'] = self.bank_account_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IndividualUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "umaAddress": obj.get("umaAddress"),
            "platformUserId": obj.get("platformUserId"),
            "userType": obj.get("userType"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "fullName": obj.get("fullName"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "bankAccountInfo": BankAccountInfo.from_dict(obj.get("bankAccountInfo")) if obj.get("bankAccountInfo") is not None else None
        })
        return _obj


